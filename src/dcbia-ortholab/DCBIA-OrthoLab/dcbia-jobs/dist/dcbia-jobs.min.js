angular.module("dcbia-jobs",["clusterpost-list"]);angular.module("dcbia-jobs").directive("dcbiaMfsda",["$routeParams","dcbia","clusterauth","clusterpostService","dcbiaVTKService",function($routeParams,dcbia,clusterauth,clusterpostService,dcbiaVTKService){function link($scope,$attrs,$filter){var minimist=require("minimist");var stringArgv=require("string-argv");clusterauth.getUser().then(function(res){$scope.user=res});clusterauth.getScopes().then(function(res){$scope.userScopes=res.data[0]});$scope.projects={newProject:{collections:[],type:"project",patients:"",name:"",description:""},projects:[],projectsProperties:{defaultProject:{class:""}},selectedProjectData:{},section:0,showSection:0};$scope.defaultProject={_id:"defaultProject",name:"All projects",type:"project",items:0};$scope.morphologicalDataCollection={collections:[],selectedCollections:[]};$scope.morphologicalCheckBox=false;$scope.clinicalDataCollection={collections:[],selectedCollections:[]};$scope.clinicalCheckBox=false;$scope.csv={};$scope.$watch("csv.file",function(){if($scope.csv.file){$scope.csv.readFile().then(function(){$scope.$apply()})}});$scope.projects.getProjects=function(){return dcbia.getProjects().then(function(res){delete $scope.projects.selectedProject;$scope.projects.projects=res.data;_.each($scope.projects.projects,function(project){$scope.projects.projectsProperties[project._id]={class:""}})}).catch(console.error)};$scope.projects.selectProject=function(project){if($scope.projects.selectedProject){$scope.projects.projectsProperties[$scope.projects.selectedProject._id].class=""}$scope.projects.selectedProject=project;$scope.projects.projectsProperties[project._id].class="alert alert-info";$scope.clinicalDataCollection.selectedCollections=[];$scope.morphologicalDataCollection.selectedCollections=[];if(_.isObject($scope.projects.selectedProject.collections)){$scope.clinicalDataCollection.selectedCollections=$scope.projects.selectedProject.collections.clinicalDataCollection;$scope.morphologicalDataCollection.selectedCollections=$scope.projects.selectedProject.collections.morphologicalDataCollection;return Promise.all([Promise.all(_.map($scope.clinicalDataCollection.selectedCollections,dcbia.getClinicalData)).then(function(res){var merged=[];_.each(_.compact(_.pluck(res,"data")),function(coll){merged=$scope.projects.mergeCollections(merged,coll)});return merged}),Promise.all(_.map($scope.morphologicalDataCollection.selectedCollections,dcbia.getMorphologicalData)).then(function(res){var merged=[];_.each(_.compact(_.pluck(res,"data")),function(coll){merged=$scope.projects.mergeCollections(merged,coll)});return merged})]).then(function(res){$scope.projects.selectedProjectData=$scope.projects.mergeCollections(res[0],res[1]);$scope.projects.selectedProjectDataKeys=$scope.projects.getProjectDataKeys($scope.projects.selectedProjectData);$scope.projects.selectedProjectPatients=_.map($scope.projects.selectedProjectData,function(item){return item.patientId})})}else{_.each($scope.projects.selectedProject.collections,function(selectedProjectCollection){var clinicalCollection=_.find($scope.clinicalDataCollection.collections,function(clinicalCollection){return clinicalCollection["_id"]===selectedProjectCollection["_id"]});if(clinicalCollection)$scope.clinicalDataCollection.selectedCollections.push(clinicalCollection.name);var morphologicalCollection=_.find($scope.morphologicalDataCollection.collections,function(morphologicalCollection){return morphologicalCollection["_id"]===selectedProjectCollection["_id"]});if(morphologicalCollection)$scope.morphologicalDataCollection.selectedCollections.push(morphologicalCollection.name)});Promise.all([$scope.clinical.getSelectedProjectData(),$scope.morphological.getSelectedProjectData()]).then(function(){$scope.projects.selectedProjectData=$scope.projects.mergeCollections($scope.clinical.data,$scope.morphological.data);$scope.projects.selectedProjectDataKeys=$scope.projects.getProjectDataKeys($scope.projects.selectedProjectData);$scope.projects.selectedProjectPatients=_.map($scope.projects.selectedProjectData,function(item){return item.patientId})})}};$scope.projects.getFilteredAttachments=function(attachments){if($scope.projects.analysis.attachmentsRegex&&$scope.projects.analysis.attachmentsRegex!=""){var re=new RegExp("^"+$scope.projects.analysis.attachmentsRegex.split("*").join(".*")+"$");var filteredkeys=_.filter(_.keys(attachments),function(key){return re.test(key)});return _.pick(attachments,filteredkeys)}else{return attachments}};$scope.projects.setGroupProjectDataDisplayed=function(){_.each($scope.projects.analysis.selectedProjectDataDisplayed,function(row){row.group=$scope.projects.analysis.group})};$scope.projects.getProjectKeys=function(project){var projectKeys={};_.each(project,function(items){_.extend(projectKeys,items)});if(projectKeys._id){delete projectKeys._id}if(projectKeys._rev){delete projectKeys._rev}return _.keys(projectKeys)};$scope.projects.getProjectDataKeys=function(data){var projectDataKeys={};_.each(data,function(items){_.extend(projectDataKeys,items)});if(projectDataKeys._id){delete projectDataKeys._id}if(projectDataKeys._rev){delete projectDataKeys._rev}if(projectDataKeys.type){delete projectDataKeys.type}if(projectDataKeys.owner){delete projectDataKeys.owner}if(projectDataKeys.owners){delete projectDataKeys.owners}if(projectDataKeys.formId){delete projectDataKeys.formId}if(projectDataKeys.date){delete projectDataKeys.date}if(projectDataKeys.scope){delete projectDataKeys.scope}return _.keys(projectDataKeys)};$scope.projects.select=function(project){return dcbia.getProject(project._id).then(function(res){var selectedProject=res.data;$scope.projects.selectProject(selectedProject);$scope.projects.selectedProjectKeys=$scope.projects.getProjectKeys([selectedProject])}).catch(console.error)};$scope.projects.getProjectItems=function(project){var sum=0;if(_.isObject(project.collections)&&!_.isArray(project.collections)){_.each(project.collections.clinicalDataCollection,function(cdcid){var collection=_.find($scope.clinicalDataCollection.collections,function(clinicalCollection){return cdcid===clinicalCollection._id});if(collection){sum+=collection.items.length}});_.each(project.collections.morphologicalDataCollection,function(mcid){var collection=_.find($scope.morphologicalDataCollection.collections,function(morphologicalCollection){return mcid===morphologicalCollection._id});if(collection){sum+=collection.items.length}})}else{_.each(project.collections,function(collection){_.each($scope.clinicalDataCollection.collections,function(clinicalCollection){if(collection._id==clinicalCollection._id){sum+=clinicalCollection.items.length}});_.each($scope.morphologicalDataCollection.collections,function(morphologicalDataCollection){if(collection._id==morphologicalDataCollection._id){sum+=morphologicalDataCollection.items.length}})})}return sum};$scope.projects.mergeCollections=function(collection1,collection2){_.each(collection2,function(col2){if(col2&&col2._attachments&&col2._id){var att={};att[col2._id]=col2._attachments;col2.attachments=att;delete col2._attachments}if(col2._id){delete col2._id}if(col2._rev){delete col2._rev}if(col2.owners){delete col2.owners}if(col2.owner){delete col2.owner}var mergedCollection=_.find(collection1,function(mergedCollection){return mergedCollection["patientId"]===col2["patientId"]});mergedCollection?_.extend(mergedCollection,col2):collection1.push(col2)});_.each(collection1,function(col1){if(col1.type!=="mergedCollection"){col1.type="mergedCollection"}});return collection1};$scope.morphologicalDataCollection.getMorphologicalDataCollections=function(){return dcbia.getMorphologicalDataCollections().then(function(res){$scope.morphologicalDataCollection.collections=res.data}).catch(console.error)};$scope.morphologicalDataCollection.checkAll=function(checkbox){$scope.morphologicalDataCollection.selectedCollections=[];if(checkbox){_.each($scope.morphologicalDataCollection.collections,function(collection){$scope.morphologicalDataCollection.selectedCollections.push(collection.name)})}};$scope.morphologicalDataCollection.isCollectionInProject=function(collection){var display=false;_.each($scope.morphologicalDataCollection.selectedCollections,function(selectedCollection){if(collection.name===selectedCollection){display=true}});return display};$scope.clinicalDataCollection.getClinicalDataCollections=function(){return dcbia.getClinicalDataCollections().then(function(res){$scope.clinicalDataCollection.collections=res.data}).catch(console.error)};$scope.clinicalDataCollection.isCollectionInProject=function(collection){var display=false;_.each($scope.clinicalDataCollection.selectedCollections,function(selectedCollection){if(collection.name===selectedCollection){display=true}});return display};$scope.projects.showSubset=function(index){var analysis=$scope.projects.selectedProject.analyses[index];var selectedProjectData=_.filter($scope.projects.selectedProjectData,function(data){return analysis.selectedPatients.indexOf(data.patientId)!==-1});selectedProjectData=_.map(selectedProjectData,function(data){return _.pick(data,function(value,key,object){return analysis.selectedVariables.indexOf(key)!==-1})});$scope.projects.analysis={};$scope.projects.analysis.name=analysis.name;$scope.projects.analysis.selectedProjectData=selectedProjectData;$scope.projects.analysis.selectedProjectDataKeys=analysis.selectedVariables;var indexgroup=$scope.projects.analysis.selectedProjectDataKeys.indexOf("group");if(indexgroup!==-1){$scope.projects.analysis.hasGroup=true;$scope.projects.analysis.selectedProjectDataKeys.splice(indexgroup,1);$scope.projects.analysis.selectedProjectDataKeys.splice(0,0,"group")}else{$scope.projects.analysis.hasGroup=false}};$scope.projects.selectVisibleAttachments=function(select){_.each($scope.projects.analysis.selectedProjectDataDisplayed,function(pdata){_.each(pdata.attachments,function(col){_.each($scope.projects.getFilteredAttachments(col),function(att){att.selected=select})})})};$scope.clusterpost={};$scope.mfsda={editJobParameters:true,jobParameters:$scope.jobParameters};$scope.mfsda.submitJob=function(){var mfsda=$scope.mfsda.getData();var job={};if($scope.mfsda.name){job.name=$scope.mfsda.name}job.executable="MFSDA.sh";job.parameters=[{flag:"-shapeData",name:"shapeData.txt"},{flag:"-coordData",name:mfsda.template.name},{flag:"-covariate",name:"covariate.txt"},{flag:"-covariateInterest",name:"covariateInterest.txt"},{flag:"-covariateType",name:"covariateType.txt"},{flag:"-outputDir",name:"./output"},{flag:"-exportJSON",name:""}];job.type="job";job.inputs=mfsda.inputs;job.executionserver=$scope.clusterpost.selectedServer.name;job.outputs=[{name:"output",type:"tar.gz"},{name:"stdout.out",type:"file"},{name:"stderr.err",type:"file"},{name:"efit.json",type:"file",path:"./output/efit.json"},{name:"pvalues.json",type:"file",path:"./output/pvalues.json"}];job.userEmail=$scope.user.email;job.jobparameters=[];var jobParameters=minimist(stringArgv($scope.mfsda.jobParameters));_.each(jobParameters,function(val,key){if(_.isArray(val)){_.each(val,function(v){job.jobparameters.push({name:v,flag:"-"+key})})}else{job.jobparameters.push({name:val,flag:"-"+key})}});return clusterpostService.createAndSubmitJob(job,_.pluck(mfsda.data,"name"),_.pluck(mfsda.data,"data")).then(function(res){console.log(res)})};$scope.mfsda.download=function(job){if(job){var jobname=job._id;if(job.name){jobname=job.name}var zip=new JSZip;var allpromise=[];_.each(job.inputs,function(input){allpromise.push(clusterpostService.getAttachment(job._id,input.name,"arraybuffer").then(function(ab){return{name:input.name,arraybuffer:ab.data}}))});if(job._attachments["efit.json"]){allpromise.push(clusterpostService.getAttachment(job._id,"efit.json","arraybuffer").then(function(ab){return{name:"efit.json",arraybuffer:ab.data}}))}if(job._attachments["pvalues.json"]){allpromise.push(clusterpostService.getAttachment(job._id,"pvalues.json","arraybuffer").then(function(ab){return{name:"pvalues.json",arraybuffer:ab.data}}))}return Promise.all(allpromise).then(function(filecontent){_.each(filecontent,function(fc){zip.file(jobname+"/"+fc.name,fc.arraybuffer)});return zip.generateAsync({type:"blob"}).then(function(bb){saveAs(bb,jobname+".zip")})})}};$scope.mfsda.getData=function(){var mfsda={};$scope.mfsda.showWarningTemplate=false;var covariateName=_.clone($scope.projects.analysis.selectedProjectDataKeys);var covariate=_.clone($scope.projects.analysis.selectedProjectData);var mapnames={};var templates=_.map(covariate,function(cov){if(cov.isTemplate){return _.map(cov.attachments,function(att,colid){return _.map(att,function(a,name){if(a.selected){var obj={name:"",local:{uri:""}};obj.local.uri=colid+"/"+name;if(mapnames[name]){obj.name=mapnames[name]+"_"+name;mapnames[name]+=1}else{mapnames[name]=1;obj.name=name}return obj}return""})})}});covariate=_.compact(_.map(covariate,function(cov){if(!cov.isTemplate){_.each(covariateName,function(covkey){if(cov[covkey]===undefined){cov[covkey]=0}});return cov}return null}));var template=_.compact(_.flatten(templates));if(template.length!=1){$scope.mfsda.showWarningTemplate=true;return}var covariateNameIndex=_.indexOf(covariateName,"patientId");if(_.indexOf(covariateName,"patientId")!=-1){covariateName.splice(covariateNameIndex,1)}var covariateNameIndex=_.indexOf(covariateName,"attachments");if(_.indexOf(covariateName,"attachments")!=-1){covariateName.splice(covariateNameIndex,1)}var covariateNameIndex=_.indexOf(covariateName,"template");if(_.indexOf(covariateName,"template")!=-1){covariateName.splice(covariateNameIndex,1)}try{var result=json2csv({data:covariate,fields:covariateName}).split("\n");result.splice(0,1);covariatecsv=result.join("\n")}catch(err){console.error(err)}var covariateInterest=_.map(covariateName,function(){return"1"}).join(",");var covariateType=_.map(covariateName,function(cn){var data=_.pluck(covariate,cn);var datatype=_.map(data,function(d){if(_.isNumber(d)){return Number.isInteger(d)}return 1});return Number(!eval(datatype.join("&&")))}).join(",");var filelistobj=_.compact(_.flatten(_.map(covariate,function(cov){if(!cov.isTemplate){return _.compact(_.flatten(_.map(cov.attachments,function(att,colid){return _.map(att,function(a,name){if(a.selected){var obj={name:"",local:{uri:""}};obj.local.uri=colid+"/"+name;if(mapnames[name]){obj.name=mapnames[name]+"_"+name;mapnames[name]+=1}else{mapnames[name]=1;obj.name=name}return obj}return""})})))}return null})));mfsda.data=[];mfsda.data.push({name:"shapeData.txt",data:_.pluck(filelistobj,"name").join("\n")});mfsda.data.push({name:"covariate.txt",data:covariatecsv});mfsda.data.push({name:"covariateInterest.txt",data:covariateInterest});mfsda.data.push({name:"covariateType.txt",data:covariateType});if(template.length==1){filelistobj.push(template[0])}filelistobj.push({name:"shapeData.txt"});filelistobj.push({name:"covariate.txt"});filelistobj.push({name:"covariateInterest.txt"});filelistobj.push({name:"covariateType.txt"});mfsda.inputs=filelistobj;mfsda.template=template[0];return mfsda};$scope.mfsda.hueSlider={min:0,max:1,options:{step:.01,precision:2,ceil:1,floor:0}};$scope.mfsda.covariateSlider={value:0,options:{step:1,minLimit:0,maxLimit:8,ceil:8}};$scope.mfsda.componentSlider={value:0,options:{step:1,minLimit:0,maxLimit:2,ceil:2}};$scope.mfsda.pvalueSlider={value:0,options:{step:1,minLimit:0,maxLimit:7,ceil:7}};$scope.mfsda.jobCallback=function(job){$scope.mfsda.vtkUrl=job;$scope.activeTab=2;var template=_.find(job.parameters,function(param){return param.flag=="-coordData"});template=template.name;return Promise.all([clusterpostService.getAttachment(job._id,"efit.json","json"),clusterpostService.getAttachment(job._id,"pvalues.json","json"),clusterpostService.getAttachment(job._id,template,"text")]).then(function(res){var data=_.compact(_.pluck(res,"data"));$scope.mfsda.vtkPolyData=dcbiaVTKService.parseVTK(data[2]);if(data.length>0){$scope.mfsda.efit=data[0];$scope.mfsda.Lpvals_fdr=data[1].Lpvals_fdr;if($scope.mfsda.Lpvals_fdr.length>0){$scope.mfsda.pvalueSlider.maxLimit=$scope.mfsda.Lpvals_fdr[0].length-1;$scope.mfsda.pvalueSlider.options.ceil=$scope.mfsda.Lpvals_fdr[0].length-1}var size=$scope.mfsda.efit.efitBetas._ArraySize_;$scope.mfsda.covariateSlider.options.ceil=size[0]-1;$scope.mfsda.covariateSlider.options.maxLimit=size[0]-1;$scope.mfsda.componentSlider.options.ceil=size[2]-1;$scope.mfsda.componentSlider.options.maxLimit=size[2]-1;var colors=$scope.mfsda.getEfitBetas();$scope.mfsda.vtkPolyData.addPointDataArray(new Float32Array(colors),"pointScalars","Float32Array")}$scope.$apply()}).catch(console.error)};$scope.mfsda.getEfitBetas=function(){var efitBetas=[];if($scope.mfsda.efit&&$scope.mfsda.efit.efitBetas){var arraydata=$scope.mfsda.efit.efitBetas._ArrayData_;var size=$scope.mfsda.efit.efitBetas._ArraySize_;var start=$scope.mfsda.componentSlider.value*size[1]*size[0]+$scope.mfsda.covariateSlider.value;var end=start+size[1]*size[0];var max=0;for(var i=start;i<end&&i<arraydata.length;i+=size[0]){efitBetas.push(arraydata[i])}}return efitBetas};$scope.mfsda.getPvalues=function(){var pvalues=[];if($scope.mfsda.Lpvals_fdr){for(var i=0;i<$scope.mfsda.Lpvals_fdr.length;i++){pvalues.push($scope.mfsda.Lpvals_fdr[i][$scope.mfsda.pvalueSlider.value])}}return pvalues};$scope.mfsda.selectOutput={options:[{name:"betas"},{name:"pValues"}]};$scope.mfsda.selectOutput.update=function(){var colors=[];if($scope.mfsda.selectOutput.option){if($scope.mfsda.selectOutput.option.name==="betas"){colors=$scope.mfsda.getEfitBetas()}else if($scope.mfsda.selectOutput.option.name==="pValues"){colors=$scope.mfsda.getPvalues()}$scope.mfsda.vtkPolyData.addPointDataArray(new Float32Array(colors),"pointScalars","Float32Array")}};$scope.$watch("mfsda.covariateSlider.value",function(covariate){if(covariate!==undefined&&$scope.mfsda.vtkPolyData){var colors=$scope.mfsda.getEfitBetas();$scope.mfsda.vtkPolyData.addPointDataArray(new Float32Array(colors),"pointScalars","Float32Array")}});$scope.$watch("mfsda.componentSlider.value",function(component){if(component!==undefined&&$scope.mfsda.vtkPolyData){var colors=$scope.mfsda.getEfitBetas();$scope.mfsda.vtkPolyData.addPointDataArray(new Float32Array(colors),"pointScalars","Float32Array")}});$scope.$watch("mfsda.pvalueSlider.value",function(pValue){if(pValue!==undefined&&$scope.mfsda.vtkPolyData){var colors=$scope.mfsda.getPvalues();$scope.mfsda.vtkPolyData.addPointDataArray(new Float32Array(colors),"pointScalars","Float32Array")}});$scope.$watch("mfsda.fileTemplate",function(fileTemplate){if(fileTemplate){var reader=new FileReader;reader.onload=function(e){var vtk=e.target.result;$scope.mfsda.vtkPolyData=dcbiaVTKService.parseVTK(vtk);$scope.mfsda.selectOutput.update()};reader.onerror=function(e){reject(e)};reader.readAsText(fileTemplate)}});$scope.csv.export=function(project){var prom;if(!$scope.projects.selectedProject||project._id!==$scope.projects.selectedProject._id){prom=$scope.projects.select(project)}else{prom=Promise.resolve(true)}prom.then(function(){var keys=$scope.projects.getProjectKeys([$scope.projects.selectedProject]);var csv="name:,"+$scope.projects.selectedProject.name+"\n";csv+="description:,"+$scope.projects.selectedProject.description+"\n";csv+="patients:,"+$scope.projects.selectedProject.patients+"\n";csv+="\n";var collectionKeys=["Name","Number of items","Type"];csv+=collectionKeys.toString();csv+="\n";_.each($scope.projects.selectedProject.collections,function(collection,i){_.each($scope.clinicalDataCollection.collections,function(clinicalCollection){if(collection._id===clinicalCollection._id){csv+=clinicalCollection.name+","+clinicalCollection.items.length+","+clinicalCollection.type+"\n"}});_.each($scope.morphologicalDataCollection.collections,function(morphologicalDataCollection){if(collection._id===morphologicalDataCollection._id){csv+=morphologicalDataCollection.name+","+morphologicalDataCollection.items.length+","+morphologicalDataCollection.type+"\n"}})});var filename=$scope.projects.selectedProject.name;if($scope.projects.selectedProject.name.indexOf("csv")===-1){filename+=".csv"}return $scope.csv.download(filename,csv)}).catch(console.error)};$scope.csv.download=function(filename,csv){var pom=document.createElement("a");var bb=new Blob([csv],{type:"text/plain"});pom.setAttribute("href",window.URL.createObjectURL(bb));pom.setAttribute("download",filename);pom.dataset.downloadurl=["text/plain",pom.download,pom.href].join(":");pom.click()};$scope.clinical={data:[]};$scope.morphological={data:[]};$scope.clinical.getSelectedProjectData=function(){var mapId=_.map($scope.projects.selectedProject.collections,function(col){return col._id});return Promise.all(_.map(mapId,dcbia.getClinicalData)).then(function(res){_.each(res,function(collection){$scope.clinical.data=$scope.clinical.data.length?$scope.projects.mergeCollections($scope.clinical.data,collection.data):collection.data});return $scope.clinical.data})};$scope.morphological.getSelectedProjectData=function(){var mapId=_.map($scope.projects.selectedProject.collections,function(col){return col._id});return Promise.all(_.map(mapId,dcbia.getMorphologicalData)).then(function(res){_.each(res,function(collection){$scope.morphological.data=$scope.morphological.data.length?$scope.projects.mergeCollections($scope.morphological.data,collection.data):collection.data});return $scope.morphological.data})};$scope.clusterpost={};clusterpostService.getExecutionServers().then(function(res){$scope.clusterpost.servers=res.data;$scope.clusterpost.selectedServer=res.data[0]});$scope.projects.getProjects().then(function(){return $scope.morphologicalDataCollection.getMorphologicalDataCollections()}).then(function(){return $scope.clinicalDataCollection.getClinicalDataCollections()})}return{restrict:"E",link:link,scope:{jobParameters:"="},templateUrl:"./src/dcbia-mfsda.template.html"}}]);angular.module("dcbia-jobs").directive("dcbiaPreprocessing",["$routeParams","dcbia","clusterauth","clusterpostService","dcbiaVTKService",function($routeParams,dcbia,clusterauth,clusterpostService,dcbiaVTKService){function link($scope,$attrs,$filter){var minimist=require("minimist");var stringArgv=require("string-argv");clusterauth.getUser().then(function(res){$scope.user=res});clusterauth.getScopes().then(function(res){$scope.userScopes=res.data[0]});$scope.projects={newProject:{collections:[],type:"project",patients:"",name:"",description:""},projects:[],projectsProperties:{defaultProject:{class:""}},selectedProjectData:{},section:0,showSection:0};$scope.defaultProject={_id:"defaultProject",name:"All projects",type:"project",items:0};$scope.morphologicalDataCollection={collections:[],selectedCollections:[]};$scope.morphologicalCheckBox=false;$scope.clinicalDataCollection={collections:[],selectedCollections:[]};$scope.clinicalCheckBox=false;$scope.csv={};$scope.$watch("csv.file",function(){if($scope.csv.file){$scope.csv.readFile().then(function(){$scope.$apply()})}});$scope.projects.getProjects=function(){return dcbia.getProjects().then(function(res){delete $scope.projects.selectedProject;$scope.projects.projects=res.data;_.each($scope.projects.projects,function(project){$scope.projects.projectsProperties[project._id]={class:""}})}).catch(console.error)};$scope.projects.selectProject=function(project){if($scope.projects.selectedProject){$scope.projects.projectsProperties[$scope.projects.selectedProject._id].class=""}$scope.projects.selectedProject=project;$scope.projects.projectsProperties[project._id].class="alert alert-info";$scope.clinicalDataCollection.selectedCollections=[];$scope.morphologicalDataCollection.selectedCollections=[];if(_.isObject($scope.projects.selectedProject.collections)){$scope.clinicalDataCollection.selectedCollections=$scope.projects.selectedProject.collections.clinicalDataCollection;$scope.morphologicalDataCollection.selectedCollections=$scope.projects.selectedProject.collections.morphologicalDataCollection;return Promise.all([Promise.all(_.map($scope.clinicalDataCollection.selectedCollections,dcbia.getClinicalData)).then(function(res){var merged=[];_.each(_.compact(_.pluck(res,"data")),function(coll){merged=$scope.projects.mergeCollections(merged,coll)});return merged}),Promise.all(_.map($scope.morphologicalDataCollection.selectedCollections,dcbia.getMorphologicalData)).then(function(res){var merged=[];_.each(_.compact(_.pluck(res,"data")),function(coll){merged=$scope.projects.mergeCollections(merged,coll)});return merged})]).then(function(res){$scope.projects.selectedProjectData=$scope.projects.mergeCollections(res[0],res[1]);$scope.projects.selectedProjectDataKeys=$scope.projects.getProjectDataKeys($scope.projects.selectedProjectData);$scope.projects.selectedProjectPatients=_.map($scope.projects.selectedProjectData,function(item){return item.patientId})})}else{_.each($scope.projects.selectedProject.collections,function(selectedProjectCollection){var clinicalCollection=_.find($scope.clinicalDataCollection.collections,function(clinicalCollection){return clinicalCollection["_id"]===selectedProjectCollection["_id"]});if(clinicalCollection)$scope.clinicalDataCollection.selectedCollections.push(clinicalCollection.name);var morphologicalCollection=_.find($scope.morphologicalDataCollection.collections,function(morphologicalCollection){return morphologicalCollection["_id"]===selectedProjectCollection["_id"]});if(morphologicalCollection)$scope.morphologicalDataCollection.selectedCollections.push(morphologicalCollection.name)});Promise.all([$scope.clinical.getSelectedProjectData(),$scope.morphological.getSelectedProjectData()]).then(function(){$scope.projects.selectedProjectData=$scope.projects.mergeCollections($scope.clinical.data,$scope.morphological.data);$scope.projects.selectedProjectDataKeys=$scope.projects.getProjectDataKeys($scope.projects.selectedProjectData);$scope.projects.selectedProjectPatients=_.map($scope.projects.selectedProjectData,function(item){return item.patientId})})}};$scope.projects.getFilteredAttachments=function(attachments){if($scope.projects.analysis.attachmentsRegex&&$scope.projects.analysis.attachmentsRegex!=""){var re=new RegExp("^"+$scope.projects.analysis.attachmentsRegex.split("*").join(".*")+"$");var filteredkeys=_.filter(_.keys(attachments),function(key){return re.test(key)});return _.pick(attachments,filteredkeys)}else{return attachments}};$scope.projects.setGroupProjectDataDisplayed=function(){_.each($scope.projects.analysis.selectedProjectDataDisplayed,function(row){row.group=$scope.projects.analysis.group})};$scope.projects.getProjectKeys=function(project){var projectKeys={};_.each(project,function(items){_.extend(projectKeys,items)});if(projectKeys._id){delete projectKeys._id}if(projectKeys._rev){delete projectKeys._rev}return _.keys(projectKeys)};$scope.projects.getProjectDataKeys=function(data){var projectDataKeys={};_.each(data,function(items){_.extend(projectDataKeys,items)});if(projectDataKeys._id){delete projectDataKeys._id}if(projectDataKeys._rev){delete projectDataKeys._rev}if(projectDataKeys.type){delete projectDataKeys.type}if(projectDataKeys.owner){delete projectDataKeys.owner}if(projectDataKeys.owners){delete projectDataKeys.owners}if(projectDataKeys.formId){delete projectDataKeys.formId}if(projectDataKeys.date){delete projectDataKeys.date}if(projectDataKeys.scope){delete projectDataKeys.scope}return _.keys(projectDataKeys)};$scope.projects.select=function(project){return dcbia.getProject(project._id).then(function(res){var selectedProject=res.data;$scope.projects.selectProject(selectedProject);$scope.projects.selectedProjectKeys=$scope.projects.getProjectKeys([selectedProject])}).catch(console.error)};$scope.projects.getProjectItems=function(project){var sum=0;if(_.isObject(project.collections)&&!_.isArray(project.collections)){_.each(project.collections.clinicalDataCollection,function(cdcid){var collection=_.find($scope.clinicalDataCollection.collections,function(clinicalCollection){return cdcid===clinicalCollection._id});if(collection){sum+=collection.items.length}});_.each(project.collections.morphologicalDataCollection,function(mcid){var collection=_.find($scope.morphologicalDataCollection.collections,function(morphologicalCollection){return mcid===morphologicalCollection._id});if(collection){sum+=collection.items.length}})}else{_.each(project.collections,function(collection){_.each($scope.clinicalDataCollection.collections,function(clinicalCollection){if(collection._id==clinicalCollection._id){sum+=clinicalCollection.items.length}});_.each($scope.morphologicalDataCollection.collections,function(morphologicalDataCollection){if(collection._id==morphologicalDataCollection._id){sum+=morphologicalDataCollection.items.length}})})}return sum};$scope.projects.mergeCollections=function(collection1,collection2){_.each(collection2,function(col2){if(col2&&col2._attachments&&col2._id){var att={};att[col2._id]=col2._attachments;col2.attachments=att;delete col2._attachments}if(col2._id){delete col2._id}if(col2._rev){delete col2._rev}if(col2.owners){delete col2.owners}if(col2.owner){delete col2.owner}var mergedCollection=_.find(collection1,function(mergedCollection){return mergedCollection["patientId"]===col2["patientId"]});mergedCollection?_.extend(mergedCollection,col2):collection1.push(col2)});_.each(collection1,function(col1){if(col1.type!=="mergedCollection"){col1.type="mergedCollection"}});return collection1};$scope.morphologicalDataCollection.getMorphologicalDataCollections=function(){return dcbia.getMorphologicalDataCollections().then(function(res){$scope.morphologicalDataCollection.collections=res.data}).catch(console.error)};$scope.morphologicalDataCollection.checkAll=function(checkbox){$scope.morphologicalDataCollection.selectedCollections=[];if(checkbox){_.each($scope.morphologicalDataCollection.collections,function(collection){$scope.morphologicalDataCollection.selectedCollections.push(collection.name)})}};$scope.morphologicalDataCollection.isCollectionInProject=function(collection){var display=false;_.each($scope.morphologicalDataCollection.selectedCollections,function(selectedCollection){if(collection.name===selectedCollection){display=true}});return display};$scope.clinicalDataCollection.getClinicalDataCollections=function(){return dcbia.getClinicalDataCollections().then(function(res){$scope.clinicalDataCollection.collections=res.data}).catch(console.error)};$scope.clinicalDataCollection.isCollectionInProject=function(collection){var display=false;_.each($scope.clinicalDataCollection.selectedCollections,function(selectedCollection){if(collection.name===selectedCollection){display=true}});return display};$scope.projects.showSubset=function(index){$scope.preprocessing.Neutral=true;var analysis=$scope.projects.selectedProject.analyses[index];var selectedProjectData=_.filter($scope.projects.selectedProjectData,function(data){return analysis.selectedPatients.indexOf(data.patientId)!==-1});selectedProjectData=_.map(selectedProjectData,function(data){return _.pick(data,function(value,key,object){return analysis.selectedVariables.indexOf(key)!==-1})});$scope.projects.analysis={};$scope.projects.analysis.name=analysis.name;$scope.projects.analysis.selectedProjectData=selectedProjectData;$scope.projects.analysis.selectedProjectDataKeys=analysis.selectedVariables;var indexgroup=$scope.projects.analysis.selectedProjectDataKeys.indexOf("group");if(indexgroup!==-1){$scope.projects.analysis.hasGroup=true;$scope.projects.analysis.selectedProjectDataKeys.splice(indexgroup,1);$scope.projects.analysis.selectedProjectDataKeys.splice(0,0,"group")}else{$scope.projects.analysis.hasGroup=false}};$scope.projects.selectVisibleAttachments=function(select){_.each($scope.projects.analysis.selectedProjectDataDisplayed,function(pdata){_.each(pdata.attachments,function(col){_.each($scope.projects.getFilteredAttachments(col),function(att){att.selected=select})})})};$scope.clusterpost={};$scope.preprocessing={editJobParameters:true,jobParameters:$scope.jobParameters}
;$scope.preprocessing.getFilteredDataSet=function(){$scope.preprocessing.OA=false;$scope.preprocessing.Control=false;$scope.preprocessing.Neutral=true;var Control_Patient=_.clone($scope.preprocessing.type_Control);var OA_Patient=_.clone($scope.preprocessing.type_OA);var keys=_.clone($scope.projects.analysis.selectedProjectDataKeys);var data=_.clone($scope.projects.analysis.selectedProjectData);var item=0;var tmp=0;var newkeys=[];var index_group=0;while(item<keys.length){if(keys[item]=="group"){item+=1;index_group=item}else if(keys[item]=="patientId"){index_patientId=item;item+=1}else{newkeys[tmp]=keys[item];tmp+=1;item+=1}}$scope.projects.analysis.selectedProjectDataKeys=newkeys;var newdataOA=[];var newdataControl=[];var newdataNeutral=[];var patient=0;var newPatient=0;if(Control_Patient&&!OA_Patient){$scope.preprocessing.Control=true;$scope.preprocessing.Neutral=false;while(patient<data.length){if(data[patient].group==0){newdataControl[newPatient]=data[patient];delete newdataControl.group;delete newdataControl.patientId;newPatient+=1;patient+=1}else{patient+=1}}}else if(OA_Patient&&!Control_Patient){$scope.preprocessing.OA=true;$scope.preprocessing.Neutral=false;while(patient<data.length){if(data[patient].group==1){newdataOA[newPatient]=data[patient];delete newdataOA.group;delete newdataOA.patientId;newPatient+=1;patient+=1}else{patient+=1}}}else if(OA_Patient&&Control_Patient){$scope.preprocessing.Neutral=true;while(patient<data.length){newdataNeutral[patient]=data[patient];delete newdataNeutral.group;delete newdataNeutral.patientId;patient+=1}}$scope.projects.analysis.selectedProjectDataNeutral=newdataNeutral;$scope.projects.analysis.selectedProjectDataOA=newdataOA;$scope.projects.analysis.selectedProjectDataControl=newdataControl;return};$scope.preprocessing.submitJob=function(){var preprocessing=$scope.preprocessing.getData();var job={};if($scope.preprocessing.name){job.name=$scope.preprocessing.name}job.executable="preprocessing.sh";job.parameters=[{flag:"--csv",name:"covariates_Values.csv"},{flag:"--num_components",name:preprocessing.flags.num_components},{flag:"--output",name:"./output"}];job.type="job";job.inputs=preprocessing.inputs;job.executionserver=$scope.clusterpost.selectedServer.name;job.outputs=[{name:"output",type:"tar.gz"},{name:"stdout.out",type:"file"},{name:"stderr.err",type:"file"},{name:"pearsoncorr.csv",type:"file",path:"./output/pearsoncorr.csv"},{name:"pvaluesFirst.json",type:"file",path:"./output/pvaluesFirst.json"},{name:"pearsonFirst.csv",type:"file",path:"./output/pearsonFirst.csv"},{name:"pvaluesFirst.csv",type:"file",path:"./output/pvaluesFirst.csv"},{name:"pearsoncorr.json",type:"file",path:"./output/pearsoncorr.json"},{name:"Plot_covariates_for_each_patient.pdf",type:"file",path:"./output/Plot_covariates_for_each_patient.pdf"}];job.userEmail=$scope.user.email;job.jobparameters=[];var jobParameters=minimist(stringArgv($scope.preprocessing.jobParameters));_.each(jobParameters,function(val,key){if(_.isArray(val)){_.each(val,function(v){job.jobparameters.push({name:v,flag:"-"+key})})}else{job.jobparameters.push({name:val,flag:"-"+key})}});return clusterpostService.createAndSubmitJob(job,_.pluck(preprocessing.data,"name"),_.pluck(preprocessing.data,"data")).then(function(res){console.log(res.config)})};$scope.preprocessing.download=function(job){if(job){var jobname=job._id;if(job.name){jobname=job.name}var zip=new JSZip;var allpromise=[];_.each(job.inputs,function(input){allpromise.push(clusterpostService.getAttachment(job._id,input.name,"arraybuffer").then(function(ab){return{name:input.name,arraybuffer:ab.data}}))});if(job._attachments["pearsoncorr.json"]){allpromise.push(clusterpostService.getAttachment(job._id,"pearsoncorr.json","arraybuffer").then(function(ab){return{name:"pearsoncorr.json",arraybuffer:ab.data}}))}if(job._attachments["pvaluesFirst.json"]){allpromise.push(clusterpostService.getAttachment(job._id,"pvaluesFirst.json","arraybuffer").then(function(ab){return{name:"pvaluesFirst.json",arraybuffer:ab.data}}))}if(job._attachments["Plot_covariates_for_each_patient.pdf"]){allpromise.push(clusterpostService.getAttachment(job._id,"Plot_covariates_for_each_patient.pdf","arraybuffer").then(function(ab){return{name:"Plot_covariates_for_each_patient.pdf",arraybuffer:ab.data}}))}if(job._attachments["pvaluesFirst.csv"]){allpromise.push(clusterpostService.getAttachment(job._id,"pvaluesFirst.csv","arraybuffer").then(function(ab){return{name:"pvaluesFirst.csv",arraybuffer:ab.data}}))}if(job._attachments["pearsonFirst.csv"]){allpromise.push(clusterpostService.getAttachment(job._id,"pearsonFirst.csv","arraybuffer").then(function(ab){return{name:"pearsonFirst.csv",arraybuffer:ab.data}}))}if(job._attachments["pearsoncorr.csv"]){allpromise.push(clusterpostService.getAttachment(job._id,"pearsoncorr.csv","arraybuffer").then(function(ab){return{name:"pearsoncorr.csv",arraybuffer:ab.data}}))}return Promise.all(allpromise).then(function(filecontent){_.each(filecontent,function(fc){zip.file(jobname+"/"+fc.name,fc.arraybuffer)});return zip.generateAsync({type:"blob"}).then(function(bb){saveAs(bb,jobname+".zip")})})}};$scope.preprocessing.getData=function(){var preprocessing={};$scope.preprocessing.showWarningNumComponent=false;$scope.preprocessing.showWarningPatienttype=false;$scope.preprocessing.numCovariates=0;$scope.preprocessing.typeofPatient=0;var OA_Patient=_.clone($scope.preprocessing.type_OA);var Control_Patient=_.clone($scope.preprocessing.type_Control);var covariateName=_.clone($scope.projects.analysis.selectedProjectDataKeys);var covariate=_.clone($scope.projects.analysis.selectedProjectData);var num_components=_.clone($scope.preprocessing.num_components);if(OA_Patient&&!Control_Patient){covariate=$scope.projects.analysis.selectedProjectDataOA}else if(Control_Patient&&!OA_Patient){covariate=$scope.projects.analysis.selectedProjectDataControl}else{covariate=$scope.projects.analysis.selectedProjectDataNeutral}var covariateNames=_.compact(_.flatten(covariateName));$scope.preprocessing.length=covariateNames.length;if(num_components==0||num_components>covariateNames.length){$scope.preprocessing.showWarningNumComponent=true;return}num_components=parseInt(num_components);if(OA_Patient){$scope.preprocessing.typeofPatient=1}else{$scope.preprocessing.typeofPatient=0}if(!OA_Patient&&!Control_Patient){$scope.preprocessing.showWarningPatienttype=true;return}var mapnames={};covariate=_.compact(_.map(covariate,function(cov){_.each(covariateName,function(covkey){if(cov[covkey]===undefined){cov[covkey]=0}});return cov;return null}));var covariateNameIndex=_.indexOf(covariateName,"patientId");if(covariateNameIndex!=-1){covariateName.splice(covariateNameIndex,1)}try{var result=json2csv({data:covariate,fields:covariateName,quotes:""}).split("\n");covariatecsv=result.join("\n")}catch(err){console.error(err)}var covariateType=_.map(covariateName,function(cn){var data=_.pluck(covariate,cn);var datatype=_.map(data,function(d){if(_.isNumber(d)){return Number.isInteger(d)}return 1});return Number(!eval(datatype.join("&&")))}).join(",");var filelistobj=_.compact(_.flatten(_.map(covariate,function(cov){return _.compact(_.flatten(_.map(cov.attachments,function(att,colid){return _.map(att,function(a,name){if(a.selected){var obj={name:"",local:{uri:""}};obj.local.uri=colid+"/"+name;if(mapnames[name]){obj.name=mapnames[name]+"_"+name;mapnames[name]+=1}else{mapnames[name]=1;obj.name=name}return obj}return""})})));return null})));OA_Control=parseInt($scope.preprocessing.typeofPatient);preprocessing.data=[];preprocessing.data.push({name:"covariates_Values.csv",data:covariatecsv});preprocessing.flags={};preprocessing.flags.covariates=covariateName.join(" ");preprocessing.flags.num_components=String(num_components);preprocessing.flags.OA_Control=String(OA_Control);filelistobj.push({name:"covariates_Values.csv"});preprocessing.inputs=filelistobj;return preprocessing};$scope.preprocessing.hueSlider={min:0,max:1,options:{step:.01,precision:2,ceil:1,floor:0}};$scope.preprocessing.covariateSlider={value:0,options:{step:1,minLimit:0,maxLimit:8,ceil:8}};$scope.preprocessing.componentSlider={value:0,options:{step:1,minLimit:0,maxLimit:2,ceil:2}};$scope.preprocessing.pvalueSlider={value:0,options:{step:1,minLimit:0,maxLimit:7,ceil:7}};$scope.heat_map={pearsoncorr:{},pvalues:{},attributes:{colors:["#ff0000","#ffff00","#008000","#0000ff"],scale:[0,.01,.05,.05001,1]}};$scope.preprocessing.jobCallback=function(job){$scope.preprocessing.showPlots=true;$scope.activeTab=2;$scope.preprocessing.getDataDisplay(job).then(function(pc){_.extend($scope.heat_map.pvalues,pc[0]);_.extend($scope.heat_map.pearsoncorr,pc[1]);$scope.heat_map.pvalues.attributes=$scope.heat_map.attributes;$scope.heat_map.pearsoncorr.attributes=$scope.heat_map.attributes;$scope.$apply()})};$scope.preprocessing.getDataDisplay=function(job,namefile){return Promise.all([clusterpostService.getAttachment(job._id,"pvaluesFirst.json","json"),clusterpostService.getAttachment(job._id,"pearsoncorr.json","json")]).then(function(res){namesx=res[0].data.covariates;var a=Array(res[1].data.pearsoncorr.length);var b=Array.apply(null,a);var namesy_pearsoncorr=b.map(function(_,n){return"PC "+(n+1)});pvalue=[];for(i=0;i<res[1].data.pearsoncorr.length;i++){pvalue[i]=[];for(j=0;j<res[1].data.covariates.length;j++){pvalue[i][j]=res[1].data.pearsoncorr[i][j][1]}}heat_map_pearsoncorr=pvalue;var namesy=res[0].data.covariates;value=[];temp=[];for(i=0;i<res[0].data.pearsoncorr.length;i++){temp[i]=[];for(j=0;j<res[0].data.covariates.length;j++){temp[i][j]=res[0].data.pearsoncorr[i][j]}}heat_map=temp;var pearsoncorr={namesx:namesx,namesy:namesy_pearsoncorr,heat_map:heat_map_pearsoncorr};var inputvalue={namesx:namesx,namesy:namesy,heat_map:heat_map};return{0:inputvalue,1:pearsoncorr}})};$scope.$watch("preprocessing.fileTemplate",function(fileTemplate){if(fileTemplate){var reader=new FileReader;reader.onload=function(e){var vtk=e.target.result;$scope.preprocessing.vtkPolyData=dcbiaVTKService.parseVTK(vtk);$scope.preprocessing.selectOutput.update()};reader.onerror=function(e){reject(e)};reader.readAsText(fileTemplate)}});$scope.csv.export=function(project){var prom;if(!$scope.projects.selectedProject||project._id!==$scope.projects.selectedProject._id){prom=$scope.projects.select(project)}else{prom=Promise.resolve(true)}prom.then(function(){var keys=$scope.projects.getProjectKeys([$scope.projects.selectedProject]);var csv="name:,"+$scope.projects.selectedProject.name+"\n";csv+="description:,"+$scope.projects.selectedProject.description+"\n";csv+="patients:,"+$scope.projects.selectedProject.patients+"\n";csv+="\n";var collectionKeys=["Name","Number of items","Type"];csv+=collectionKeys.toString();csv+="\n";_.each($scope.projects.selectedProject.collections,function(collection,i){_.each($scope.clinicalDataCollection.collections,function(clinicalCollection){if(collection._id===clinicalCollection._id){csv+=clinicalCollection.name+","+clinicalCollection.items.length+","+clinicalCollection.type+"\n"}});_.each($scope.morphologicalDataCollection.collections,function(morphologicalDataCollection){if(collection._id===morphologicalDataCollection._id){csv+=morphologicalDataCollection.name+","+morphologicalDataCollection.items.length+","+morphologicalDataCollection.type+"\n"}})});var filename=$scope.projects.selectedProject.name;if($scope.projects.selectedProject.name.indexOf("csv")===-1){filename+=".csv"}return $scope.csv.download(filename,csv)}).catch(console.error)};$scope.csv.download=function(filename,csv){var pom=document.createElement("a");var bb=new Blob([csv],{type:"text/plain"});pom.setAttribute("href",window.URL.createObjectURL(bb));pom.setAttribute("download",filename);pom.dataset.downloadurl=["text/plain",pom.download,pom.href].join(":");pom.click()};$scope.clinical={data:[]};$scope.morphological={data:[]};$scope.clinical.getSelectedProjectData=function(){var mapId=_.map($scope.projects.selectedProject.collections,function(col){return col._id});return Promise.all(_.map(mapId,dcbia.getClinicalData)).then(function(res){_.each(res,function(collection){$scope.clinical.data=$scope.clinical.data.length?$scope.projects.mergeCollections($scope.clinical.data,collection.data):collection.data});return $scope.clinical.data})};$scope.morphological.getSelectedProjectData=function(){var mapId=_.map($scope.projects.selectedProject.collections,function(col){return col._id});return Promise.all(_.map(mapId,dcbia.getMorphologicalData)).then(function(res){_.each(res,function(collection){$scope.morphological.data=$scope.morphological.data.length?$scope.projects.mergeCollections($scope.morphological.data,collection.data):collection.data});return $scope.morphological.data})};$scope.clusterpost={};clusterpostService.getExecutionServers().then(function(res){$scope.clusterpost.servers=res.data;$scope.clusterpost.selectedServer=res.data[0]});$scope.projects.getProjects().then(function(){return $scope.morphologicalDataCollection.getMorphologicalDataCollections()}).then(function(){return $scope.clinicalDataCollection.getClinicalDataCollections()})}return{restrict:"E",link:link,scope:{jobParameters:"="},templateUrl:"./src/dcbia-preprocessing.template.html"}}]);angular.module("dcbia-jobs").run(["$templateCache",function($templateCache){"use strict";$templateCache.put("./src/dcbia-mfsda.template.html",'<uib-tabset active="activeTab">\n'+'\t<uib-tab heading="Create task" index="0">\n'+'\t\t<div ng-if="projects.section == 0">\n'+'\t\t\t<div class="panel panel-default">\n'+'\t\t  \t\t<div class="panel-body">  \t\t\t\n'+'\t\t\t\t\t<div class="col-sm-6 col-md-4" ng-repeat="project in projects.projects">\n'+'\t\t\t\t\t\t<div ng-class="projects.projectsProperties[project._id].class">\n'+'\t\t\t\t\t\t    <div class="thumbnail">\n'+'\t\t\t\t\t\t      <div class="caption">\n'+"\t\t\t\t\t\t        <h3>{{project.name}}</h3>\n"+"\t\t\t\t\t\t        <p>\n"+"\t\t\t\t\t\t        \t<b>Number of items: </b> {{projects.getProjectItems(project)}}\n"+"\t\t\t\t\t\t        </p>\n"+'\t\t\t\t\t        \t<div class="btn-group">\n'+'\t\t\t\t\t\t\t\t <button type="button" class="btn btn-default" ng-click="projects.showSection = 1;projects.select(project)">\n'+'\t\t\t\t\t\t\t\t \t<span class="glyphicon glyphicon-eye-open"></span>\n'+"\t\t\t\t\t\t\t\t </button>\n"+"\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t      </div>\n"+"\t\t\t\t\t\t    </div>\n"+"\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t</div>\n"+"\t\t\t\t</div>\n"+"\t\t\t</div>\n"+'\t\t\t<div class="panel panel-default" style="overflow:scroll" ng-if="projects.showSection == 1">\n'+'\t\t\t\t<div class="panel-heading">\n'+"\t\t\t    \tSaved subsets\n"+"\t\t\t  \t</div>\n"+'\t\t\t  \t<div class="panel-body">\n'+'\t\t\t  \t\t<table st-table="projects.displayedAnalyses" st-safe-src="projects.selectedProject.analyses" class="table table-striped">\n'+"\t\t\t            <thead>\n"+"\t\t\t                <tr>\n"+'\t\t\t                    <th colspan="2">\n'+'\t\t\t                        <input st-search="" placeholder="search by name" class="input-sm form-control" type="search"/>\n'+"\t\t\t                    </th>\t                    \n"+"\t\t\t                </tr>\n"+"\t\t\t            </thead>\n"+"\t\t\t            <tbody>\n"+'\t\t\t                <tr ng-repeat="(index, analysis) in projects.displayedAnalyses">\n'+"\t\t\t                    <td>\n"+"\t\t\t                        {{analysis.name}}\n"+"\t\t\t                    </td>\n"+"\t\t\t                    <td>\n"+'\t\t\t                        <button type="button" class="btn btn-info" ng-click="projects.showSubset(index)">\n'+'\t\t\t                \t\t\t<span class="glyphicon glyphicon-eye-open"></span>\n'+"\t\t\t             \t\t\t</button>\n"+"\t\t\t                    </td>                        \n"+"\t\t\t                </tr>\n"+"\t\t\t            </tbody>\n"+"\t\t\t        </table>\n"+"\t\t\t  \t</div>\n"+"\t\t\t</div>\n"+'\t\t\t<div class="panel panel-default" style="overflow:scroll" ng-if="projects.showSection == 1">\n'+'\t\t\t\t<div class="panel-heading">\n'+"\t\t\t    \tSubset\n"+"\t\t\t  \t</div>\t\t  \t\n"+'\t\t\t\t<div class="panel-body">\n'+'\t\t\t\t\t<div class="input-group">\n'+'\t\t\t  \t\t\t<span class="input-group-addon">Name</span>\n'+'\t\t\t  \t\t\t<input type="text" class="form-control" placeholder="Subset name" aria-describedby="basic-addon3" ng-model="projects.analysis.name">\n'+"\t\t  \t\t\t</div>  \t\t\t\t    \n"+'\t\t\t\t\t<table st-table="projects.analysis.selectedProjectDataDisplayed" st-safe-src="projects.analysis.selectedProjectData" class="table table-striped">\n'+"\t\t\t\t\t\t<thead>\n"+"\t\t\t\t\t\t\t<tr>\n"+'\t\t\t\t\t\t\t\t<th colspan="2" st-sort="{{key}}" ng-if="projects.analysis.hasGroup">group</th>\n'+'\t\t\t\t\t\t\t\t<th colspan="1" st-sort="{{key}}">Template</th>\n'+'\t\t\t\t\t\t\t\t<th colspan="2" ng-repeat="key in projects.analysis.selectedProjectDataKeys" st-sort="{{key}}">{{key}}</th>\n'+"\t\t\t\t\t\t\t</tr>\n"+"\t\t\t\t\t\t\t<tr>\n"+'\t\t\t\t\t\t\t\t<th colspan="2" ng-if="projects.analysis.hasGroup">\n'+'\t\t\t\t\t\t\t\t\t<div class="input-group">\t\t\t\t\t\t\t\n'+'\t\t\t\t\t\t\t\t\t\t<span class="input-group-btn">\n'+'\t\t\t\t\t\t\t\t\t\t\t<button type="button" class="btn btn-sm btn-info" ng-click="projects.setGroupProjectDataDisplayed()" >\n'+'\t\t\t\t\t                \t\t\t<span class="glyphicon glyphicon-ok"></span>\n'+"\t\t\t\t\t             \t\t\t</button>\n"+"\t\t\t\t\t\t\t\t\t\t</span>\n"+'\t\t\t\t\t\t\t\t\t\t<input placeholder="Set group" class="input-sm form-control" type="number" ng-model="projects.analysis.group"/>\n'+"\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t</th>\n"+'\t\t\t\t\t\t\t\t<th colspan="1"></th>\n'+'\t\t\t\t\t\t\t\t<th colspan="2" ng-repeat="key in projects.analysis.selectedProjectDataKeys">\n'+'\t\t\t\t\t\t\t\t\t<input st-search="{{key}}" placeholder="search by {{key}}" class="input-sm form-control" type="search" ng-if="key!=\'attachments\'" />\n'+'\t\t\t\t\t\t\t\t\t<div class="input-group" ng-if="key==\'attachments\'">\n'+'\t\t\t\t\t\t\t\t\t\t<span class="input-group-btn">\n'+'\t\t\t\t\t\t\t\t  \t\t\t<button type="button" class="btn btn-sm btn-info" ng-click="projects.selectVisibleAttachments(true)">\n'+'\t\t\t\t\t                \t\t\t<span class="glyphicon glyphicon-ok"></span>\n'+"\t\t\t\t\t             \t\t\t</button>\n"+'\t\t\t\t\t             \t\t\t<button type="button" class="btn btn-sm btn-danger" ng-click="projects.selectVisibleAttachments(false)">\n'+'\t\t\t\t\t                \t\t\t<span class="glyphicon glyphicon-remove"></span>\n'+"\t\t\t\t\t             \t\t\t</button>\n"+"\t\t\t\t\t\t\t  \t\t\t</span>\n"+'\t\t\t\t\t\t\t\t\t\t<input placeholder="search for attachments" class="input-sm form-control" ng-model="projects.analysis.attachmentsRegex" type="search" />\n'+"\t\t\t\t\t\t\t  \t\t</div>\n"+"\t\t\t\t\t\t\t\t</th>\n"+"\t\t\t\t\t\t\t</tr>\n"+"\t\t\t\t\t\t</thead>\n"+"\t\t\t\t\t\t<tbody>\n"+'\t\t\t\t\t\t\t<tr ng-repeat="row in projects.analysis.selectedProjectDataDisplayed">\n'+'\t\t\t\t\t\t\t\t<td colspan="2" ng-if="projects.analysis.hasGroup"><input placeholder="group" class="input-sm form-control" ng-model="row.group" type="number"/></td>\n'+'\t\t\t\t\t\t\t\t<td colspan="1"><input type="checkbox" aria-label="..." ng-model="row.isTemplate"></td>\n'+'\t\t\t\t\t\t\t\t<td colspan="2" ng-repeat="key in projects.analysis.selectedProjectDataKeys">\n'+"\t\t\t\t\t\t\t\t\t<div ng-if=\"key == '_attachments'\">\n"+'\t\t\t\t\t\t\t\t\t\t<button type="button" class="btn btn-default" ng-repeat="(key, att) in row[key]" ng-click="morphologicalDataCollection.downloadAttachment(row._id, key, att)">\n'+'\t\t\t\t\t\t\t\t\t\t\t<span class="glyphicon glyphicon-eye"></span>{{att}}\n'+"\t\t\t\t\t\t\t\t\t\t</button>\n"+"\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t\t<div ng-if=\"key == 'attachments'\">\n"+'\t\t\t\t\t\t\t\t\t\t<div ng-repeat="(keycoll, collattachments) in row[key]">\n'+'\t\t\t\t\t\t\t\t\t\t\t<div class="input-group" ng-repeat="(keyatt, att) in projects.getFilteredAttachments(collattachments)">\n'+'\t\t\t\t\t\t\t\t\t\t\t\t<span class="input-group-addon">\n'+'\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="checkbox" aria-label="..." ng-model="att.selected">\n'+"\t\t\t\t\t\t\t\t\t\t\t\t</span>\n"+'\t\t\t\t\t\t\t\t\t\t\t\t<label class="form-control" >{{keyatt}}</label>\n'+"\t\t\t\t\t\t\t\t\t\t    </div>\n"+"\t\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t\t<div ng-if=\"!_.isArray(row[key]) && key != '_attachments' && key != 'attachments'\">\n"+"\t\t\t\t\t\t\t\t\t\t{{row[key]}}\n"+"\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t\t<div ng-if=\"_.isArray(row[key]) && key != '_attachments' && key != 'attachments'\">\n"+"\t\t\t\t\t\t\t\t\t\t<ul>\n"+'\t\t\t\t\t\t\t\t\t\t\t<li ng-repeat="item in row[key]" ng-if="key == \'owners\'">{{item.user}}</li>\n'+"\t\t\t\t\t\t\t\t\t\t</ul>\n"+"\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t</td>\t\t\t\t\t\t\n"+"\t\t\t\t\t\t\t</tr>\n"+"\t\t\t\t\t\t</tbody>\n"+"\t\t\t\t\t</table>\n"+"\n"+'\t\t\t\t\t<div class="alert alert-warning" role="alert" ng-if="mfsda.showWarningTemplate">\n'+"\t\t\t\t\t\tYou have selected more than 1 or no template for the MFSDA statistical analysis. <br>\t\t\t\t\n"+"\t\t\t\t\t</div>\n"+"\t\t\t\t\t<br>\n"+'\t\t\t\t\t<div class="row">\n'+'\t\t\t\t\t  <div class="col-md-6">\n'+'\t\t\t\t\t    <div class="input-group">\n'+'\t\t\t\t\t\t\t<span class="input-group-addon" id="basic-addon1">Task name</span>\n'+'\t\t\t\t\t\t\t<input type="text" class="form-control" placeholder="MFSDA task name" aria-describedby="basic-addon3" ng-model="mfsda.name">\n'+"\t\t\t\t\t    </div>\n"+"\t\t\t\t\t  </div>\n"+'\t\t\t\t\t  <div class="col-md-6">\n'+'\t\t\t\t\t    <div class="input-group">\n'+'\t\t\t\t\t    \t<span class="input-group-addon" id="basic-addon1">Execution server</span>\n'+'\t\t\t\t\t    \t<select class="form-control"  ng-model="clusterpost.selectedServer" ng-options="server.name for server in clusterpost.servers"></select>\n'+"\t\t\t\t\t    </div>\n"+"\t\t\t\t\t  </div>\n"+"\t\t\t\t\t</div>\n"+"\t\t\t\t\t<br>\n"+'\t\t\t\t\t<div class="row">\n'+'\t\t\t\t\t\t<div class="col-md-12">\n'+'\t\t\t\t\t\t\t<div class="input-group">\n'+'\t\t\t\t\t\t\t\t<span class="input-group-btn">\n'+'\t\t\t\t\t\t\t\t\t<button class="btn btn-default" type="button" ng-click="mfsda.editJobParameters=!mfsda.editJobParameters"><span class="glyphicon glyphicon-pencil" aria-hidden="true"></span></button>\n'+"\t\t\t\t\t\t\t\t</span>\t\t\t\t\n"+'\t\t\t\t\t\t\t\t<input type="text" class="form-control" placeholder="Additional job parameters" aria-describedby="basic-addon3" ng-model="mfsda.jobParameters" ng-readonly="mfsda.editJobParameters">\n'+"\t\t\t\t  \t\t\t</div>\n"+"\t\t\t\t  \t\t</div>\n"+"\t\t\t  \t\t</div>\n"+"\t\t\t  \t\t<br>\n"+'\t\t\t  \t\t<div class="row">\n'+'\t\t\t  \t\t\t<div class="col-md-12">\n'+'\t\t\t\t  \t\t\t<span class="input-group-btn">\n'+'\t\t\t\t\t\t\t\t<button type="button" class="btn btn-success" ng-click="mfsda.submitJob()">\n'+'\t\t\t\t\t\t\t\t\t<span class="glyphicon glyphicon-ok"></span>\n'+"\t\t\t\t\t\t\t\t</button>\n"+'\t\t\t\t\t\t\t\t<button type="button" class="btn btn-info" ng-click="mfsda.download()">\n'+'\t\t\t\t\t\t\t\t\t<span class="glyphicon glyphicon-download"></span>\n'+"\t\t\t\t\t\t\t\t</button>\t\t  \t\t\t\n"+"\t\t\t\t  \t\t\t</span>\n"+"\t\t\t\t  \t\t</div>\n"+"\t\t\t  \t\t</div>\n"+"\t\t\t\t</div>\n"+"\t\t\t</div>\n"+"\t\t</div>\n"+"\t</uib-tab>\n"+'\t<uib-tab heading="Active tasks" index="1">\n'+'\t\t<div class="panel panel-default">\t\t\t\t\n'+'\t\t\t<clusterpost-jobs executable="\'MFSDA.sh\'" job-callback="mfsda.jobCallback" download-callback="mfsda.download"></clusterpost-jobs>\n'+"\t\t</div>\n"+"\t</uib-tab>\n"+'\t<uib-tab heading="Display results" index="2">\n'+"\n"+"\n"+"\n"+'\t\t<div class="input-group">\n'+'\t\t\t<select ng-model="mfsda.selectOutput.option" class="form-control" ng-options="option as option.name for option in mfsda.selectOutput.options" ng-change="mfsda.selectOutput.update()">\n'+"\t\t\t</select>\n"+"\t\t</div>\n"+"\n"+'\t\t<div class="input-group">\n'+'\t\t\t<label class="btn btn-default" for="mfsda-file-selector">\n'+'\t\t\t \t<span class="glyphicon glyphicon-folder-open"></span>\n'+'\t\t\t    <input id="mfsda-file-selector" file-model=\'mfsda.fileTemplate\' type="file"  style="display:none;">\n'+"\t\t\t</label>\n"+"\t\t</div>\n"+"\t\t\n"+'\t\t<div class="panel panel-default">\n'+'\t\t  <div class="panel-heading">\n'+'\t\t    <h3 class="panel-title">Hue</h3>\n'+"\t\t  </div>\n"+'\t\t  <div class="panel-body">\n'+'\t\t    <rzslider class="custom-slider"\n'+'\t\t\trz-slider-model="mfsda.hueSlider.min"\n'+'\t\t\trz-slider-high="mfsda.hueSlider.max"\n'+'\t\t\trz-slider-options="mfsda.hueSlider.options"></rzslider>\t\t\n'+"\t\t  </div>\n"+"\t\t</div>\n"+"\t\t\n"+'\t\t<div ng-if="mfsda.selectOutput.option.name == \'betas\'" class="col-md-12">\n'+'\t\t\t<div class="panel panel-default col-md-6">\n'+'\t\t\t\t<div class="panel-heading">\n'+'\t\t\t\t\t<h3 class="panel-title">Covariate</h3>\n'+"\t\t\t\t</div>\n"+'\t\t\t\t<div class="panel-body">\n'+'\t\t\t\t\t<rzslider class="custom-slider"\n'+'\t\t\t\t\trz-slider-model="mfsda.covariateSlider.value"\t\t\t\n'+'\t\t\t\t\trz-slider-options="mfsda.covariateSlider.options"></rzslider>\n'+"\t\t\t\t</div>\n"+"\t\t\t</div>\n"+'\t\t\t<div class="panel panel-default col-md-6">\n'+'\t\t\t\t<div class="panel-heading">\n'+'\t\t\t\t\t<h3 class="panel-title">Component</h3>\n'+"\t\t\t\t</div>\n"+'\t\t\t\t<div class="panel-body">\n'+'\t\t\t\t\t<rzslider class="custom-slider"\n'+'\t\t\t\t\trz-slider-model="mfsda.componentSlider.value"\t\t\t\n'+'\t\t\t\t\trz-slider-options="mfsda.componentSlider.options"></rzslider>\n'+"\t\t\t\t</div>\n"+"\t\t\t</div>\n"+"\t\t</div>\n"+"\n"+"\t\t<div ng-if=\"mfsda.selectOutput.option.name == 'pValues'\">\n"+'\t\t\t<div class="panel-heading">\n'+'\t\t\t\t<h3 class="panel-title">pValue</h3>\n'+"\t\t\t</div>\n"+'\t\t\t<div class="panel-body">\n'+'\t\t\t\t<rzslider class="custom-slider"\n'+'\t\t\t\t\trz-slider-model="mfsda.pvalueSlider.value"\t\t\t\n'+'\t\t\t\t\trz-slider-options="mfsda.pvalueSlider.options"></rzslider>\t\t\n'+"\t\t\t</div>\n"+"\n"+"\t\t</div>\n"+"\t\t<br>\n"+'\t\t<dcbia-vtk vtk-poly-data="mfsda.vtkPolyData" hue-range="mfsda.hueSlider"></dcbia-vtk>\n'+"\t\t\n"+"\t</uib-tab>\n"+"</uit-tabset>\n"+"\n")
;$templateCache.put("./src/dcbia-preprocessing.template.html",'<uib-tabset active="activeTab">\n'+'\t<uib-tab heading="Select task" index="0">\n'+'\t\t<div ng-if="projects.section == 0">\n'+'\t\t\t<div class="panel panel-default">\n'+'\t\t  \t\t<div class="panel-body">  \t\t\t\n'+'\t\t\t\t\t<div class="col-sm-6 col-md-4" ng-repeat="project in projects.projects">\n'+'\t\t\t\t\t\t<div ng-class="projects.projectsProperties[project._id].class">\n'+'\t\t\t\t\t\t    <div class="thumbnail">\n'+'\t\t\t\t\t\t      <div class="caption">\n'+"\t\t\t\t\t\t        <h3>{{project.name}}</h3>\n"+"\t\t\t\t\t\t        <p>\n"+"\t\t\t\t\t\t        \t<b>Number of items: </b> {{projects.getProjectItems(project)}}\n"+"\t\t\t\t\t\t        </p>\n"+'\t\t\t\t\t        \t<div class="btn-group">\n'+'\t\t\t\t\t\t\t\t <button type="button" class="btn btn-default" ng-click="projects.showSection = 1;projects.select(project)">\n'+'\t\t\t\t\t\t\t\t \t<span class="glyphicon glyphicon-eye-open"></span>\n'+"\t\t\t\t\t\t\t\t </button>\n"+"\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t      </div>\n"+"\t\t\t\t\t\t    </div>\n"+"\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t</div>\n"+"\t\t\t\t</div>\n"+"\t\t\t</div>\n"+'\t\t\t<div class="panel panel-default" style="overflow:scroll" ng-if="projects.showSection == 1">\n'+'\t\t\t\t<div class="panel-heading">\n'+"\t\t\t    \tSaved subsets\n"+"\t\t\t  \t</div>\n"+'\t\t\t  \t<div class="panel-body">\n'+'\t\t\t  \t\t<table st-table="projects.displayedAnalyses" st-safe-src="projects.selectedProject.analyses" class="table table-striped">\n'+"\t\t\t            <thead>\n"+"\t\t\t                <tr>\n"+'\t\t\t                    <th colspan="2">\n'+'\t\t\t                        <input st-search="" placeholder="search by name" class="input-sm form-control" type="search"/>\n'+"\t\t\t                    </th>\t                    \n"+"\t\t\t                </tr>\n"+"\t\t\t            </thead>\n"+"\t\t\t            <tbody>\n"+'\t\t\t                <tr ng-repeat="(index, analysis) in projects.displayedAnalyses">\n'+"\t\t\t                    <td>\n"+"\t\t\t                        {{analysis.name}}\n"+"\t\t\t                    </td>\n"+"\t\t\t                    <td>\n"+'\t\t\t                        <button type="button" class="btn btn-info" ng-click="projects.showSubset(index)" >\n'+'\t\t\t                \t\t\t<span class="glyphicon glyphicon-eye-open"></span>\n'+"\t\t\t             \t\t\t</button>\n"+"\t\t\t                    </td>                        \n"+"\t\t\t                </tr>\n"+"\t\t\t            </tbody>\n"+"\t\t\t        </table>\n"+"\t\t\t  \t</div>\n"+"\t\t\t</div>\n"+'\t\t\t<div class="panel panel-default" style="overflow:scroll" ng-if="projects.showSection == 1">\n'+'\t\t\t\t<div class="input-group">\n'+'\t\t\t  \t\t<span class="input-group-addon">Number of axis to run PCA</span>\n'+'\t\t\t  \t\t<input type="text" class="form-control" placeholder="Number of components" aria-describedby="basic-addon3" ng-model="preprocessing.num_components">\n'+"\t\t  \t\t</div>\n"+'\t\t  \t\t<div class="input-group">\n'+'\t\t  \t\t\t<span class="input-group-addon">Choose OA patients or Control patients</span>\n'+'\t                \x3c!-- <input type="checkbox" aria-label="OA" checklist-model="OA" checklist-value="row"> --\x3e\n'+'\t                \t<span class="input-group-addon">OA</span>\n'+'\t                \t<input type="checkbox" class="form-control" ng-model="preprocessing.type_OA" placeholder="OA" ng-change="preprocessing.getFilteredDataSet()">\n'+'\t                \t<span class="input-group-addon">Control</span>\n'+' \t\t\t\t\t\t<input type="checkbox" class="form-control" ng-model="preprocessing.type_Control" placeholder="Control" ng-change="preprocessing.getFilteredDataSet()">\n'+' \t\t\t\t\t\t\x3c!-- <span class="input-group-addon">{{$scope.preprocessing.numCovariates}}}</span> --\x3e\n'+"\t            </div>\n"+'\t\t\t\t<div class="panel-body">\n'+'\t\t\t\t\t<div class="input-group">\n'+'\t\t\t  \t\t\t<span class="input-group-addon">Name</span>\n'+'\t\t\t  \t\t\t<input type="text" class="form-control" placeholder="Subset name" aria-describedby="basic-addon3" ng-model="projects.analysis.name">\n'+"\t\t  \t\t\t</div>\n"+'\t\t  \t\t\t<div ng-if="preprocessing.OA">  \t\t\t\t    \n'+'\t\t\t\t\t\t<table st-table="projects.analysis.selectedProjectDataDisplayed" st-safe-src="projects.analysis.selectedProjectDataOA" class="table table-striped">\n'+"\t\t\t\t\t\t\t<thead>\n"+"\t\t\t\t\t\t\t\t<tr>\n"+'\t\t\t\t\t\t\t\t\t<th colspan="2" ng-repeat="key in projects.analysis.selectedProjectDataKeys" st-sort="{{key}}">{{key}}</th>\n'+"\t\t\t\t\t\t\t\t</tr>\n"+"\t\t\t\t\t\t\t</thead>\n"+"\t\t\t\t\t\t\t<tbody>\n"+'\t\t\t\t\t\t\t\t<tr ng-repeat="row in projects.analysis.selectedProjectDataDisplayed">\n'+'\t\t\t\t\t\t\t\t\t<td colspan="2" ng-repeat="key in projects.analysis.selectedProjectDataKeys">\n'+"\t\t\t\t\t\t\t\t\t\t<div ng-if=\"!_.isArray(row[key]) && key != '_attachments' && key != 'attachments'\">\n"+"\t\t\t\t\t\t\t\t\t\t\t{{row[key]}}\n"+"\t\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t\t\t<div ng-if=\"_.isArray(row[key]) && key != '_attachments' && key != 'attachments'\">\n"+"\t\t\t\t\t\t\t\t\t\t\t<ul>\n"+'\t\t\t\t\t\t\t\t\t\t\t\t<li ng-repeat="item in row[key]" ng-if="key == \'owners\'">{{item.user}}</li>\n'+"\t\t\t\t\t\t\t\t\t\t\t</ul>\n"+"\t\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t\t</td>\t\t\t\t\t\t\n"+"\t\t\t\t\t\t\t\t</tr>\n"+"\t\t\t\t\t\t\t</tbody>\n"+"\t\t\t\t\t\t</table>\n"+"\t\t\t\t\t</div>\n"+'\t\t\t\t\t<div ng-if="preprocessing.Control">  \t\t\t\t    \n'+'\t\t\t\t\t\t<table st-table="projects.analysis.selectedProjectDataDisplayed" st-safe-src="projects.analysis.selectedProjectDataControl" class="table table-striped">\n'+"\t\t\t\t\t\t\t<thead>\n"+"\t\t\t\t\t\t\t\t<tr>\n"+'\t\t\t\t\t\t\t\t\t<th colspan="2" ng-repeat="key in projects.analysis.selectedProjectDataKeys" st-sort="{{key}}">{{key}}</th>\n'+"\t\t\t\t\t\t\t\t</tr>\n"+"\t\t\t\t\t\t\t</thead>\n"+"\t\t\t\t\t\t\t<tbody>\n"+'\t\t\t\t\t\t\t\t<tr ng-repeat="row in projects.analysis.selectedProjectDataDisplayed">\n'+'\t\t\t\t\t\t\t\t\t<td colspan="2" ng-repeat="key in projects.analysis.selectedProjectDataKeys">\n'+"\t\t\t\t\t\t\t\t\t\t<div ng-if=\"!_.isArray(row[key]) && key != '_attachments' && key != 'attachments'\">\n"+"\t\t\t\t\t\t\t\t\t\t\t{{row[key]}}\n"+"\t\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t\t\t<div ng-if=\"_.isArray(row[key]) && key != '_attachments' && key != 'attachments'\">\n"+"\t\t\t\t\t\t\t\t\t\t\t<ul>\n"+'\t\t\t\t\t\t\t\t\t\t\t\t<li ng-repeat="item in row[key]" ng-if="key == \'owners\'">{{item.user}}</li>\n'+"\t\t\t\t\t\t\t\t\t\t\t</ul>\n"+"\t\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t\t</td>\t\t\t\t\t\t\n"+"\t\t\t\t\t\t\t\t</tr>\n"+"\t\t\t\t\t\t\t</tbody>\n"+"\t\t\t\t\t\t</table>\n"+"\t\t\t\t\t</div>\n"+'\t\t\t\t\t<div ng-if="preprocessing.Neutral">  \t\t\t\t    \n'+'\t\t\t\t\t\t<table st-table="projects.analysis.selectedProjectDataDisplayed" st-safe-src="projects.analysis.selectedProjectDataNeutral" class="table table-striped">\n'+"\t\t\t\t\t\t\t<thead>\n"+"\t\t\t\t\t\t\t\t<tr>\n"+'\t\t\t\t\t\t\t\t\t<th colspan="2" ng-repeat="key in projects.analysis.selectedProjectDataKeys" st-sort="{{key}}">{{key}}</th>\n'+"\t\t\t\t\t\t\t\t</tr>\n"+"\t\t\t\t\t\t\t</thead>\n"+"\t\t\t\t\t\t\t<tbody>\n"+'\t\t\t\t\t\t\t\t<tr ng-repeat="row in projects.analysis.selectedProjectDataDisplayed">\n'+'\t\t\t\t\t\t\t\t\t<td colspan="2" ng-repeat="key in projects.analysis.selectedProjectDataKeys">\n'+"\t\t\t\t\t\t\t\t\t\t<div ng-if=\"!_.isArray(row[key]) && key != '_attachments' && key != 'attachments'\">\n"+"\t\t\t\t\t\t\t\t\t\t\t{{row[key]}}\n"+"\t\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t\t\t<div ng-if=\"_.isArray(row[key]) && key != '_attachments' && key != 'attachments'\">\n"+"\t\t\t\t\t\t\t\t\t\t\t<ul>\n"+'\t\t\t\t\t\t\t\t\t\t\t\t<li ng-repeat="item in row[key]" ng-if="key == \'owners\'">{{item.user}}</li>\n'+"\t\t\t\t\t\t\t\t\t\t\t</ul>\n"+"\t\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t\t</td>\t\t\t\t\t\t\n"+"\t\t\t\t\t\t\t\t</tr>\n"+"\t\t\t\t\t\t\t</tbody>\n"+"\t\t\t\t\t\t</table>\n"+"\t\t\t\t\t</div>\n"+'\t\t\t\t\t<div class="alert alert-warning" role="alert" ng-if="preprocessing.showWarningNumComponent">\n'+"\t\t\t\t\t\tNumber of components wrong ! You have to choose between 1 and {{preprocessing.length}} <br>\n"+"\t\t\t\t    </div>\n"+'\t\t\t\t    <div class="alert alert-warning" role="alert" ng-if="preprocessing.showWarningPatienttype">\n'+"\t\t\t\t\t\tYou have to choose Control patients or OA patients or both<br>\n"+"\t\t\t\t    </div>\n"+"\t\t\t\t\t<br>\n"+'\t\t\t\t\t<div class="row">\n'+'\t\t\t\t\t  <div class="col-md-6">\n'+'\t\t\t\t\t    <div class="input-group">\n'+'\t\t\t\t\t\t\t<span class="input-group-addon" id="basic-addon1">Task name</span>\n'+'\t\t\t\t\t\t\t<input type="text" class="form-control" placeholder="preprocessing task name" aria-describedby="basic-addon3" ng-model="preprocessing.name">\n'+"\t\t\t\t\t    </div>\n"+"\t\t\t\t\t  </div>\n"+'\t\t\t\t\t  <div class="col-md-6">\n'+'\t\t\t\t\t    <div class="input-group">\n'+'\t\t\t\t\t    \t<span class="input-group-addon" id="basic-addon1">Execution server</span>\n'+'\t\t\t\t\t    \t<select class="form-control"  ng-model="clusterpost.selectedServer" ng-options="server.name for server in clusterpost.servers"></select>\n'+"\t\t\t\t\t    </div>\n"+"\t\t\t\t\t  </div>\n"+"\t\t\t\t\t</div>\n"+"\t\t\t\t\t<br>\n"+'\t\t\t\t\t<div class="row">\n'+'\t\t\t\t\t\t<div class="col-md-12">\n'+'\t\t\t\t\t\t\t<div class="input-group">\n'+'\t\t\t\t\t\t\t\t<span class="input-group-btn">\n'+'\t\t\t\t\t\t\t\t\t<button class="btn btn-default" type="button" ng-click="preprocessing.editJobParameters=!preprocessing.editJobParameters"><span class="glyphicon glyphicon-pencil" aria-hidden="true"></span></button>\n'+"\t\t\t\t\t\t\t\t</span>\t\t\t\t\n"+'\t\t\t\t\t\t\t\t<input type="text" class="form-control" placeholder="Additional job parameters" aria-describedby="basic-addon3" ng-model="preprocessing.jobParameters" ng-readonly="preprocessing.editJobParameters">\n'+"\t\t\t\t  \t\t\t</div>\n"+"\t\t\t\t  \t\t</div>\n"+"\t\t\t  \t\t</div>\n"+"\t\t\t  \t\t<br>\n"+'\t\t\t  \t\t<div class="row">\n'+'\t\t\t  \t\t\t<div class="col-md-12">\n'+'\t\t\t\t  \t\t\t<span class="input-group-btn">\n'+'\t\t\t\t\t\t\t\t<button type="button" class="btn btn-success" ng-click="preprocessing.submitJob()">\n'+'\t\t\t\t\t\t\t\t\t<span class="glyphicon glyphicon-ok"></span>\n'+"\t\t\t\t\t\t\t\t</button>\n"+"\t\t\t\t  \t\t\t</span>\n"+"\t\t\t\t  \t\t</div>\n"+"\t\t\t  \t\t</div>\n"+"\t\t\t\t</div>\n"+"\t\t\t</div>\n"+"\t\t</div>\n"+"\t</uib-tab>\n"+'\t<uib-tab heading="Active tasks" index="1">\n'+'\t\t<div class="panel panel-default">\t\n'+'\t\t\t<div class="panel-body"> \t\t\t\n'+'\t\t\t\t<clusterpost-jobs executable="\'preprocessing.sh\'" job-callback="preprocessing.jobCallback" download-callback="preprocessing.download"></clusterpost-jobs>\n'+"\t\t\t</div>\n"+"\t\t</div>\n"+"\t</uib-tab>\n"+'\t<uib-tab heading="Results" index="2">\n'+'\t\t<div class="panel panel-default">\n'+'\t\t\t<div class="row">\n'+'\t\t\t\t<div class="column">\n'+"\t\t\t\t\t<h3>Modify Colors Bar</h3>\n"+'\t\t\t\t\t<div ng-repeat="color in heat_map.attributes.colors track by $index">\n'+'\t\t\t\t\t\t<input type="color" class="form-control" placeholder="Color" aria-describedby="basic-addon3" ng-model="heat_map.attributes.colors[$index]">\n'+"\t\t\t\t\t</div>\n"+"\t\t\t\t\t<button ng-click=\"heat_map.attributes.colors.push('#ffffff')\">+ Add Color</button>\n"+'\t\t\t\t\t<button ng-click = "heat_map.attributes.colors.pop()">- Remove one element</button>\n'+"\t\t\t\t</div>\n"+'\t\t\t\t<div class="column">\n'+"\t\t\t\t\t<h3>Modify Scale</h3>\n"+'\t\t\t\t\t<div ng-repeat="scale in heat_map.attributes.scale track by $index">\n'+'\t\t\t\t\t\t<input type="Number" class="form-control" placeholder="Level" aria-describedby="basic-addon3" ng-model="heat_map.attributes.scale[$index]">\n'+"\t\t\t\t\t</div>\n"+"\t\t\t\t\t<button ng-click=\"heat_map.attributes.scale.push('1.0')\">+ Add value to the scale</button>\n"+'\t\t\t\t\t<button ng-click = "heat_map.attributes.scale.pop()">- Remove one element</button>\n'+"\t\t\t\t</div>\n"+"\t\t\t</div>\t\n"+'\t\t\t<div class="panel-body" id="div1">\n'+'\t\t\t\t<preprocessing-plot-chart data="heat_map.pvalues"></preprocessing-plot-chart>\n'+"\t\t\t</div>\n"+'\t\t\t<div class="panel-body" id="div2">\n'+'\t\t\t\t<preprocessing-plot-chart data="heat_map.pearsoncorr"></preprocessing-plot-chart>\n'+"\t\t\t</div>\n"+"\t\t</div>\n"+"\t</uib-tab>\n"+"</uit-tabset>\n");$templateCache.put("./src/index_test.html",'<meta charset="utf-8">\n'+"     <style>\n"+"      /* disable text selection */\n"+"      svg *::selection {\n"+"         background : transparent;\n"+"      }\n"+"     \n"+"      svg *::-moz-selection {\n"+"         background:transparent;\n"+"      } \n"+"     \n"+"      svg *::-webkit-selection {\n"+"         background:transparent;\n"+"      }\n"+"      rect.selection {\n"+"        stroke          : #333;\n"+"        stroke-dasharray: 4px;\n"+"        stroke-opacity  : 0.5;\n"+"        fill            : transparent;\n"+"      }\n"+"\n"+"      rect.cell-border {\n"+"        stroke: #eee;\n"+"        stroke-width:0.3px;   \n"+"      }\n"+"\n"+"      rect.cell-selected {\n"+"        stroke: rgb(51,102,153);\n"+"        stroke-width:0.5px;   \n"+"      }\n"+"\n"+"      rect.cell-hover {\n"+"        stroke: #F00;\n"+"        stroke-width:0.3px;   \n"+"      }\n"+"\n"+"      text.mono {\n"+"        font-size: 9pt;\n"+"                font-family: Consolas, courier;\n"+"        fill: #aaa;\n"+"      }\n"+"\n"+"      text.text-selected {\n"+"        fill: #000;\n"+"      }\n"+"\n"+"      text.text-highlight {\n"+"        fill: #c00;\n"+"      }\n"+"      text.text-hover {\n"+"        fill: #00C;\n"+"      }\n"+"      #tooltip {\n"+"        position: absolute;\n"+"        width: 200px;\n"+"        height: auto;\n"+"        padding: 10px;\n"+"        background-color: white;\n"+"        -webkit-border-radius: 10px;\n"+"        -moz-border-radius: 10px;\n"+"        border-radius: 10px;\n"+"        -webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);\n"+"        -moz-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);\n"+"        box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);\n"+"        pointer-events: none;\n"+"      }\n"+"\n"+"      #tooltip.hidden {\n"+"        display: none;\n"+"      }\n"+"\n"+"      #tooltip p {\n"+"        margin: 0;\n"+"        font-family: sans-serif;\n"+"        font-size: 12px;\n"+"        line-height: 20px;\n"+"              }\n"+"    </style>\n"+"\n"+"</head>\n"+'<div id="tooltip" class="hidden">\n'+'        <p><span id="value"></p>\n'+"</div>\n"+'<script src="http://d3js.org/d3.v3.min.js"><\/script>\n'+"Order: \n"+'  <select id="order">\n'+'  <option value="hclust">by cluster</option>\n'+'  <option value="probecontrast">by probe name and contrast name</option>\n'+'  <option value="probe">by probe name</option>\n'+'  <option value="contrast">by contrast name</option>\n'+'  <option value="custom">by log2 ratio</option>\n'+"  </select>\n"+"  </select>\n"+"<div id=\"chart\" style='overflow:auto; width:960px; height:480px;'></div>\n"+"\n"+'<script type="text/javascript">\n'+"var margin = { top: 150, right: 10, bottom: 50, left: 100 },\n"+"  cellSize=12;\n"+"  col_number=60;\n"+"  row_number=50;\n"+"  width = cellSize*col_number, // - margin.left - margin.right,\n"+"  height = cellSize*row_number , // - margin.top - margin.bottom,\n"+"  //gridSize = Math.floor(width / 24),\n"+"  legendElementWidth = cellSize*2.5,\n"+"  colorBuckets = 21,\n"+"  colors = ['#005824','#1A693B','#347B53','#4F8D6B','#699F83','#83B09B','#9EC2B3','#B8D4CB','#D2E6E3','#EDF8FB','#FFFFFF','#F1EEF6','#E6D3E1','#DBB9CD','#D19EB9','#C684A4','#BB6990','#B14F7C','#A63467','#9B1A53','#91003F'];\n"+"  hcrow = [49,11,30,4,18,6,12,20,19,33,32,26,44,35,38,3,23,41,22,10,2,15,16,36,8,25,29,7,27,34,48,31,45,43,14,9,39,1,37,47,42,21,40,5,28,46,50,17,24,13], // change to gene name or probe id\n"+"  hccol = [6,5,41,12,42,21,58,56,14,16,43,15,17,46,47,48,54,49,37,38,25,22,7,8,2,45,9,20,24,44,23,19,13,40,11,1,39,53,10,52,3,26,27,60,50,51,59,18,31,32,30,4,55,28,29,57,36,34,33,35], // change to gene name or probe id\n"+"  rowLabel = ['1759080_s_at','1759302_s_at','1759502_s_at','1759540_s_at','1759781_s_at','1759828_s_at','1759829_s_at','1759906_s_at','1760088_s_at','1760164_s_at','1760453_s_at','1760516_s_at','1760594_s_at','1760894_s_at','1760951_s_at','1761030_s_at','1761128_at','1761145_s_at','1761160_s_at','1761189_s_at','1761222_s_at','1761245_s_at','1761277_s_at','1761434_s_at','1761553_s_at','1761620_s_at','1761873_s_at','1761884_s_at','1761944_s_at','1762105_s_at','1762118_s_at','1762151_s_at','1762388_s_at','1762401_s_at','1762633_s_at','1762701_s_at','1762787_s_at','1762819_s_at','1762880_s_at','1762945_s_at','1762983_s_at','1763132_s_at','1763138_s_at','1763146_s_at','1763198_s_at','1763383_at','1763410_s_at','1763426_s_at','1763490_s_at','1763491_s_at'], // change to gene name or probe id\n"+"  colLabel = ['con1027','con1028','con1029','con103','con1030','con1031','con1032','con1033','con1034','con1035','con1036','con1037','con1038','con1039','con1040','con1041','con108','con109','con110','con111','con112','con125','con126','con127','con128','con129','con130','con131','con132','con133','con134','con135','con136','con137','con138','con139','con14','con15','con150','con151','con152','con153','con16','con17','con174','con184','con185','con186','con187','con188','con189','con191','con192','con193','con194','con199','con2','con200','con201','con21']; // change to contrast name\n"+"\n"+'d3.tsv("data_heatmap.tsv",\n'+"function(d) {\n"+"  return {\n"+"    row:   +d.row_idx,\n"+"    col:   +d.col_idx,\n"+"    value: +d.log2ratio\n"+"  };\n"+"},\n"+"function(error, data) {\n"+"  var colorScale = d3.scale.quantile()\n"+"      .domain([ -10 , 0, 10])\n"+"      .range(colors);\n"+"  \n"+'  var svg = d3.select("#chart").append("svg")\n'+'      .attr("width", width + margin.left + margin.right)\n'+'      .attr("height", height + margin.top + margin.bottom)\n'+'      .append("g")\n'+'      .attr("transform", "translate(" + margin.left + "," + margin.top + ")")\n'+"      ;\n"+"  var rowSortOrder=false;\n"+"  var colSortOrder=false;\n"+'  var rowLabels = svg.append("g")\n'+'      .selectAll(".rowLabelg")\n'+"      .data(rowLabel)\n"+"      .enter()\n"+'      .append("text")\n'+"      .text(function (d) { return d; })\n"+'      .attr("x", 0)\n'+'      .attr("y", function (d, i) { return hcrow.indexOf(i+1) * cellSize; })\n'+'      .style("text-anchor", "end")\n'+'      .attr("transform", "translate(-6," + cellSize / 1.5 + ")")\n'+'      .attr("class", function (d,i) { return "rowLabel mono r"+i;} ) \n'+'      .on("mouseover", function(d) {d3.select(this).classed("text-hover",true);})\n'+'      .on("mouseout" , function(d) {d3.select(this).classed("text-hover",false);})\n'+'      .on("click", function(d,i) {rowSortOrder=!rowSortOrder; sortbylabel("r",i,rowSortOrder);d3.select("#order").property("selectedIndex", 4).node().focus();;})\n'+"      ;\n"+"\n"+'  var colLabels = svg.append("g")\n'+'      .selectAll(".colLabelg")\n'+"      .data(colLabel)\n"+"      .enter()\n"+'      .append("text")\n'+"      .text(function (d) { return d; })\n"+'      .attr("x", 0)\n'+'      .attr("y", function (d, i) { return hccol.indexOf(i+1) * cellSize; })\n'+'      .style("text-anchor", "left")\n'+'      .attr("transform", "translate("+cellSize/2 + ",-6) rotate (-90)")\n'+'      .attr("class",  function (d,i) { return "colLabel mono c"+i;} )\n'+'      .on("mouseover", function(d) {d3.select(this).classed("text-hover",true);})\n'+'      .on("mouseout" , function(d) {d3.select(this).classed("text-hover",false);})\n'+'      .on("click", function(d,i) {colSortOrder=!colSortOrder;  sortbylabel("c",i,colSortOrder);d3.select("#order").property("selectedIndex", 4).node().focus();;})\n'+"      ;\n"+"\n"+'  var heatMap = svg.append("g").attr("class","g3")\n'+'        .selectAll(".cellg")\n'+'        .data(data,function(d){return d.row+":"+d.col;})\n'+"        .enter()\n"+'        .append("rect")\n'+'        .attr("x", function(d) { return hccol.indexOf(d.col) * cellSize; })\n'+'        .attr("y", function(d) { return hcrow.indexOf(d.row) * cellSize; })\n'+'        .attr("class", function(d){return "cell cell-border cr"+(d.row-1)+" cc"+(d.col-1);})\n'+'        .attr("width", cellSize)\n'+'        .attr("height", cellSize)\n'+'        .style("fill", function(d) { return colorScale(d.value); })\n'+'        /* .on("click", function(d) {\n'+'               var rowtext=d3.select(".r"+(d.row-1));\n'+'               if(rowtext.classed("text-selected")==false){\n'+'                   rowtext.classed("text-selected",true);\n'+"               }else{\n"+'                   rowtext.classed("text-selected",false);\n'+"               }\n"+"        })*/\n"+'        .on("mouseover", function(d){\n'+"               //highlight text\n"+'               d3.select(this).classed("cell-hover",true);\n'+'               d3.selectAll(".rowLabel").classed("text-highlight",function(r,ri){ return ri==(d.row-1);});\n'+'               d3.selectAll(".colLabel").classed("text-highlight",function(c,ci){ return ci==(d.col-1);});\n'+"        \n"+"               //Update the tooltip position and value\n"+'               d3.select("#tooltip")\n'+'                 .style("left", (d3.event.pageX+10) + "px")\n'+'                 .style("top", (d3.event.pageY-10) + "px")\n'+'                 .select("#value")\n'+'                 .text("lables:"+rowLabel[d.row-1]+","+colLabel[d.col-1]+"\\ndata:"+d.value+"\\nrow-col-idx:"+d.col+","+d.row+"\\ncell-xy "+this.x.baseVal.value+", "+this.y.baseVal.value);  \n'+"               //Show the tooltip\n"+'               d3.select("#tooltip").classed("hidden", false);\n'+"        })\n"+'        .on("mouseout", function(){\n'+'               d3.select(this).classed("cell-hover",false);\n'+'               d3.selectAll(".rowLabel").classed("text-highlight",false);\n'+'               d3.selectAll(".colLabel").classed("text-highlight",false);\n'+'               d3.select("#tooltip").classed("hidden", true);\n'+"                       })\n"+"        ;\n"+"\n"+'  var legend = svg.selectAll(".legend")\n'+"      .data([-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10])\n"+'      .enter().append("g")\n'+'      .attr("class", "legend");\n'+" \n"+'  legend.append("rect")\n'+'    .attr("x", function(d, i) { return legendElementWidth * i; })\n'+'    .attr("y", height+(cellSize*2))\n'+'    .attr("width", legendElementWidth)\n'+'    .attr("height", cellSize)\n'+'    .style("fill", function(d, i) { return colors[i]; });\n'+" \n"+'  legend.append("text")\n'+'    .attr("class", "mono")\n'+"    .text(function(d) { return d; })\n"+'    .attr("width", legendElementWidth)\n'+'    .attr("x", function(d, i) { return legendElementWidth * i; })\n'+'    .attr("y", height + (cellSize*4));\n'+"\n"+"// Change ordering of cells\n"+"\n"+"  function sortbylabel(rORc,i,sortOrder){\n"+"       var t = svg.transition().duration(3000);\n"+"       var log2r=[];\n"+"       var sorted; // sorted is zero-based index\n"+'       d3.selectAll(".c"+rORc+i) \n'+"         .filter(function(ce){\n"+"            log2r.push(ce.value);\n"+"          })\n"+"       ;\n"+'       if(rORc=="r"){ // sort log2ratio of a gene\n'+"         sorted=d3.range(col_number).sort(function(a,b){ if(sortOrder){ return log2r[b]-log2r[a];}else{ return log2r[a]-log2r[b];}});\n"+'         t.selectAll(".cell")\n'+'           .attr("x", function(d) { return sorted.indexOf(d.col-1) * cellSize; })\n'+"           ;\n"+'         t.selectAll(".colLabel")\n'+'          .attr("y", function (d, i) { return sorted.indexOf(i) * cellSize; })\n'+"         ;\n"+"       }else{ // sort log2ratio of a contrast\n"+"                sorted=d3.range(row_number).sort(function(a,b){if(sortOrder){ return log2r[b]-log2r[a];}else{ return log2r[a]-log2r[b];}});\n"+'         t.selectAll(".cell")\n'+'           .attr("y", function(d) { return sorted.indexOf(d.row-1) * cellSize; })\n'+"           ;\n"+'         t.selectAll(".rowLabel")\n'+'          .attr("y", function (d, i) { return sorted.indexOf(i) * cellSize; })\n'+"         ;\n"+"       }\n"+"  }\n"+"\n"+'  d3.select("#order").on("change",function(){\n'+"    order(this.value);\n"+"  });\n"+"  \n"+"  function order(value){\n"+'   if(value=="hclust"){\n'+"    var t = svg.transition().duration(3000);\n"+'    t.selectAll(".cell")\n'+'      .attr("x", function(d) { return hccol.indexOf(d.col) * cellSize; })\n'+'      .attr("y", function(d) { return hcrow.indexOf(d.row) * cellSize; })\n'+"      ;\n"+"\n"+'    t.selectAll(".rowLabel")\n'+'      .attr("y", function (d, i) { return hcrow.indexOf(i+1) * cellSize; })\n'+"      ;\n"+"\n"+'    t.selectAll(".colLabel")\n'+'      .attr("y", function (d, i) { return hccol.indexOf(i+1) * cellSize; })\n'+"      ;\n"+"\n"+'   }else if (value=="probecontrast"){\n'+"    var t = svg.transition().duration(3000);\n"+'    t.selectAll(".cell")\n'+'      .attr("x", function(d) { return (d.col - 1) * cellSize; })\n'+'      .attr("y", function(d) { return (d.row - 1) * cellSize; })\n'+"      ;\n"+"\n"+'    t.selectAll(".rowLabel")\n'+'      .attr("y", function (d, i) { return i * cellSize; })\n'+"      ;\n"+"\n"+'    t.selectAll(".colLabel")\n'+'          .attr("y", function (d, i) { return i * cellSize; })\n'+"      ;\n"+"\n"+'   }else if (value=="probe"){\n'+"    var t = svg.transition().duration(3000);\n"+'    t.selectAll(".cell")\n'+'      .attr("y", function(d) { return (d.row - 1) * cellSize; })\n'+"      ;\n"+"\n"+'    t.selectAll(".rowLabel")\n'+'      .attr("y", function (d, i) { return i * cellSize; })\n'+"      ;\n"+'   }else if (value=="contrast"){\n'+"    var t = svg.transition().duration(3000);\n"+'    t.selectAll(".cell")\n'+'      .attr("x", function(d) { return (d.col - 1) * cellSize; })\n'+"      ;\n"+'    t.selectAll(".colLabel")\n'+'      .attr("y", function (d, i) { return i * cellSize; })\n'+"      ;\n"+"   }\n"+"  }\n"+"  // \n"+'  var sa=d3.select(".g3")\n'+'      .on("mousedown", function() {\n'+"          if( !d3.event.altKey) {\n"+'             d3.selectAll(".cell-selected").classed("cell-selected",false);\n'+'             d3.selectAll(".rowLabel").classed("text-selected",false);\n'+'             d3.selectAll(".colLabel").classed("text-selected",false);\n'+"          }\n"+"         var p = d3.mouse(this);\n"+'         sa.append("rect")\n'+"         .attr({\n"+"             rx      : 0,\n"+"             ry      : 0,\n"+'             class   : "selection",\n'+"             x       : p[0],\n"+"             y       : p[1],\n"+"             width   : 1,\n"+"             height  : 1\n"+"         })\n"+"      })\n"+'            .on("mousemove", function() {\n'+'         var s = sa.select("rect.selection");\n'+"      \n"+"         if(!s.empty()) {\n"+"             var p = d3.mouse(this),\n"+"                 d = {\n"+'                     x       : parseInt(s.attr("x"), 10),\n'+'                     y       : parseInt(s.attr("y"), 10),\n'+'                     width   : parseInt(s.attr("width"), 10),\n'+'                     height  : parseInt(s.attr("height"), 10)\n'+"                 },\n"+"                 move = {\n"+"                     x : p[0] - d.x,\n"+"                     y : p[1] - d.y\n"+"                 }\n"+"             ;\n"+"      \n"+"             if(move.x < 1 || (move.x*2<d.width)) {\n"+"                 d.x = p[0];\n"+"                 d.width -= move.x;\n"+"             } else {\n"+"                 d.width = move.x;       \n"+"             }\n"+"      \n"+"             if(move.y < 1 || (move.y*2<d.height)) {\n"+"                 d.y = p[1];\n"+"                 d.height -= move.y;\n"+"             } else {\n"+"                 d.height = move.y;       \n"+"             }\n"+"             s.attr(d);\n"+"      \n"+"                 // deselect all temporary selected state objects\n"+"             d3.selectAll('.cell-selection.cell-selected').classed(\"cell-selected\", false);\n"+'             d3.selectAll(".text-selection.text-selected").classed("text-selected",false);\n'+"\n"+"             d3.selectAll('.cell').filter(function(cell_d, i) {\n"+"                 if(\n"+'                     !d3.select(this).classed("cell-selected") && \n'+"                         // inner circle inside selection frame\n"+"                     (this.x.baseVal.value)+cellSize >= d.x && (this.x.baseVal.value)<=d.x+d.width && \n"+"                                          (this.y.baseVal.value)+cellSize >= d.y && (this.y.baseVal.value)<=d.y+d.height\n"+"                 ) {\n"+"      \n"+"                     d3.select(this)\n"+'                     .classed("cell-selection", true)\n'+'                     .classed("cell-selected", true);\n'+"\n"+'                     d3.select(".r"+(cell_d.row-1))\n'+'                     .classed("text-selection",true)\n'+'                     .classed("text-selected",true);\n'+"\n"+'                     d3.select(".c"+(cell_d.col-1))\n'+'                     .classed("text-selection",true)\n'+'                     .classed("text-selected",true);\n'+"                 }\n"+"             });\n"+"         }\n"+"      })\n"+'      .on("mouseup", function() {\n'+"            // remove selection frame\n"+'         sa.selectAll("rect.selection").remove();\n'+"      \n"+"             // remove temporary selection marker class\n"+"         d3.selectAll('.cell-selection').classed(\"cell-selection\", false);\n"+'         d3.selectAll(".text-selection").classed("text-selection",false);\n'+"      })\n"+'      .on("mouseout", function() {\n'+"         if(d3.event.relatedTarget.tagName=='html') {\n"+"                 // remove selection frame\n"+'             sa.selectAll("rect.selection").remove();\n'+"                 // remove temporary selection marker class\n"+"             d3.selectAll('.cell-selection').classed(\"cell-selection\", false);\n"+'             d3.selectAll(".rowLabel").classed("text-selected",false);\n'+'             d3.selectAll(".colLabel").classed("text-selected",false);\n'+"         }\n"+"      })\n"+"      ;\n"+"});\n"+"<\/script>\n")}]);
//# sourceMappingURL=dcbia-jobs.min.js.map