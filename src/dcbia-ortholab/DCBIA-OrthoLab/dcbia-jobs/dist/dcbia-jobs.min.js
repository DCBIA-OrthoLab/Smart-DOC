angular.module("dcbia-jobs",["clusterpost-list"]);angular.module("dcbia-jobs").directive("dcbiaMfsda",["$routeParams","dcbia","clusterauth","clusterpostService","dcbiaVTKService",function($routeParams,dcbia,clusterauth,clusterpostService,dcbiaVTKService){function link($scope,$attrs,$filter){var minimist=require("minimist");var stringArgv=require("string-argv");clusterauth.getUser().then(function(res){$scope.user=res});clusterauth.getScopes().then(function(res){$scope.userScopes=res.data[0]});$scope.projects={newProject:{collections:[],type:"project",patients:"",name:"",description:""},projects:[],projectsProperties:{defaultProject:{class:""}},selectedProjectData:{},section:0,showSection:0};$scope.defaultProject={_id:"defaultProject",name:"All projects",type:"project",items:0};$scope.morphologicalDataCollection={collections:[],selectedCollections:[]};$scope.morphologicalCheckBox=false;$scope.clinicalDataCollection={collections:[],selectedCollections:[]};$scope.clinicalCheckBox=false;$scope.csv={};$scope.$watch("csv.file",function(){if($scope.csv.file){$scope.csv.readFile().then(function(){$scope.$apply()})}});$scope.projects.getProjects=function(){return dcbia.getProjects().then(function(res){delete $scope.projects.selectedProject;$scope.projects.projects=res.data;_.each($scope.projects.projects,function(project){$scope.projects.projectsProperties[project._id]={class:""}})}).catch(console.error)};$scope.projects.selectProject=function(project){if($scope.projects.selectedProject){$scope.projects.projectsProperties[$scope.projects.selectedProject._id].class=""}$scope.projects.selectedProject=project;$scope.projects.projectsProperties[project._id].class="alert alert-info";$scope.clinicalDataCollection.selectedCollections=[];$scope.morphologicalDataCollection.selectedCollections=[];if(_.isObject($scope.projects.selectedProject.collections)){$scope.clinicalDataCollection.selectedCollections=$scope.projects.selectedProject.collections.clinicalDataCollection;$scope.morphologicalDataCollection.selectedCollections=$scope.projects.selectedProject.collections.morphologicalDataCollection;return Promise.all([Promise.all(_.map($scope.clinicalDataCollection.selectedCollections,dcbia.getClinicalData)).then(function(res){var merged=[];_.each(_.compact(_.pluck(res,"data")),function(coll){merged=$scope.projects.mergeCollections(merged,coll)});return merged}),Promise.all(_.map($scope.morphologicalDataCollection.selectedCollections,dcbia.getMorphologicalData)).then(function(res){var merged=[];_.each(_.compact(_.pluck(res,"data")),function(coll){merged=$scope.projects.mergeCollections(merged,coll)});return merged})]).then(function(res){$scope.projects.selectedProjectData=$scope.projects.mergeCollections(res[0],res[1]);$scope.projects.selectedProjectDataKeys=$scope.projects.getProjectDataKeys($scope.projects.selectedProjectData);$scope.projects.selectedProjectPatients=_.map($scope.projects.selectedProjectData,function(item){return item.patientId})})}else{_.each($scope.projects.selectedProject.collections,function(selectedProjectCollection){var clinicalCollection=_.find($scope.clinicalDataCollection.collections,function(clinicalCollection){return clinicalCollection["_id"]===selectedProjectCollection["_id"]});if(clinicalCollection)$scope.clinicalDataCollection.selectedCollections.push(clinicalCollection.name);var morphologicalCollection=_.find($scope.morphologicalDataCollection.collections,function(morphologicalCollection){return morphologicalCollection["_id"]===selectedProjectCollection["_id"]});if(morphologicalCollection)$scope.morphologicalDataCollection.selectedCollections.push(morphologicalCollection.name)});Promise.all([$scope.clinical.getSelectedProjectData(),$scope.morphological.getSelectedProjectData()]).then(function(){$scope.projects.selectedProjectData=$scope.projects.mergeCollections($scope.clinical.data,$scope.morphological.data);$scope.projects.selectedProjectDataKeys=$scope.projects.getProjectDataKeys($scope.projects.selectedProjectData);$scope.projects.selectedProjectPatients=_.map($scope.projects.selectedProjectData,function(item){return item.patientId})})}};$scope.projects.getFilteredAttachments=function(attachments){if($scope.projects.analysis.attachmentsRegex&&$scope.projects.analysis.attachmentsRegex!=""){var re=new RegExp("^"+$scope.projects.analysis.attachmentsRegex.split("*").join(".*")+"$");var filteredkeys=_.filter(_.keys(attachments),function(key){return re.test(key)});return _.pick(attachments,filteredkeys)}else{return attachments}};$scope.projects.setGroupProjectDataDisplayed=function(){_.each($scope.projects.analysis.selectedProjectDataDisplayed,function(row){row.group=$scope.projects.analysis.group})};$scope.projects.getProjectKeys=function(project){var projectKeys={};_.each(project,function(items){_.extend(projectKeys,items)});if(projectKeys._id){delete projectKeys._id}if(projectKeys._rev){delete projectKeys._rev}return _.keys(projectKeys)};$scope.projects.getProjectDataKeys=function(data){var projectDataKeys={};_.each(data,function(items){_.extend(projectDataKeys,items)});if(projectDataKeys._id){delete projectDataKeys._id}if(projectDataKeys._rev){delete projectDataKeys._rev}if(projectDataKeys.type){delete projectDataKeys.type}if(projectDataKeys.owner){delete projectDataKeys.owner}if(projectDataKeys.owners){delete projectDataKeys.owners}if(projectDataKeys.formId){delete projectDataKeys.formId}if(projectDataKeys.date){delete projectDataKeys.date}if(projectDataKeys.scope){delete projectDataKeys.scope}return _.keys(projectDataKeys)};$scope.projects.select=function(project){return dcbia.getProject(project._id).then(function(res){var selectedProject=res.data;$scope.projects.selectProject(selectedProject);$scope.projects.selectedProjectKeys=$scope.projects.getProjectKeys([selectedProject])}).catch(console.error)};$scope.projects.getProjectItems=function(project){var sum=0;if(_.isObject(project.collections)&&!_.isArray(project.collections)){_.each(project.collections.clinicalDataCollection,function(cdcid){var collection=_.find($scope.clinicalDataCollection.collections,function(clinicalCollection){return cdcid===clinicalCollection._id});if(collection){sum+=collection.items.length}});_.each(project.collections.morphologicalDataCollection,function(mcid){var collection=_.find($scope.morphologicalDataCollection.collections,function(morphologicalCollection){return mcid===morphologicalCollection._id});if(collection){sum+=collection.items.length}})}else{_.each(project.collections,function(collection){_.each($scope.clinicalDataCollection.collections,function(clinicalCollection){if(collection._id==clinicalCollection._id){sum+=clinicalCollection.items.length}});_.each($scope.morphologicalDataCollection.collections,function(morphologicalDataCollection){if(collection._id==morphologicalDataCollection._id){sum+=morphologicalDataCollection.items.length}})})}return sum};$scope.projects.mergeCollections=function(collection1,collection2){_.each(collection2,function(col2){if(col2&&col2._attachments&&col2._id){var att={};att[col2._id]=col2._attachments;col2.attachments=att;delete col2._attachments}if(col2._id){delete col2._id}if(col2._rev){delete col2._rev}if(col2.owners){delete col2.owners}if(col2.owner){delete col2.owner}var mergedCollection=_.find(collection1,function(mergedCollection){return mergedCollection["patientId"]===col2["patientId"]});mergedCollection?_.extend(mergedCollection,col2):collection1.push(col2)});_.each(collection1,function(col1){if(col1.type!=="mergedCollection"){col1.type="mergedCollection"}});return collection1};$scope.morphologicalDataCollection.getMorphologicalDataCollections=function(){return dcbia.getMorphologicalDataCollections().then(function(res){$scope.morphologicalDataCollection.collections=res.data}).catch(console.error)};$scope.morphologicalDataCollection.checkAll=function(checkbox){$scope.morphologicalDataCollection.selectedCollections=[];if(checkbox){_.each($scope.morphologicalDataCollection.collections,function(collection){$scope.morphologicalDataCollection.selectedCollections.push(collection.name)})}};$scope.morphologicalDataCollection.isCollectionInProject=function(collection){var display=false;_.each($scope.morphologicalDataCollection.selectedCollections,function(selectedCollection){if(collection.name===selectedCollection){display=true}});return display};$scope.clinicalDataCollection.getClinicalDataCollections=function(){return dcbia.getClinicalDataCollections().then(function(res){$scope.clinicalDataCollection.collections=res.data}).catch(console.error)};$scope.clinicalDataCollection.isCollectionInProject=function(collection){var display=false;_.each($scope.clinicalDataCollection.selectedCollections,function(selectedCollection){if(collection.name===selectedCollection){display=true}});return display};$scope.projects.showSubset=function(index){var analysis=$scope.projects.selectedProject.analyses[index];var selectedProjectData=_.filter($scope.projects.selectedProjectData,function(data){return analysis.selectedPatients.indexOf(data.patientId)!==-1});selectedProjectData=_.map(selectedProjectData,function(data){return _.pick(data,function(value,key,object){return analysis.selectedVariables.indexOf(key)!==-1})});$scope.projects.analysis={};$scope.projects.analysis.name=analysis.name;$scope.projects.analysis.selectedProjectData=selectedProjectData;$scope.projects.analysis.selectedProjectDataKeys=analysis.selectedVariables;var indexgroup=$scope.projects.analysis.selectedProjectDataKeys.indexOf("group");if(indexgroup!==-1){$scope.projects.analysis.hasGroup=true;$scope.projects.analysis.selectedProjectDataKeys.splice(indexgroup,1);$scope.projects.analysis.selectedProjectDataKeys.splice(0,0,"group")}else{$scope.projects.analysis.hasGroup=false}};$scope.projects.selectVisibleAttachments=function(select){_.each($scope.projects.analysis.selectedProjectDataDisplayed,function(pdata){_.each(pdata.attachments,function(col){_.each($scope.projects.getFilteredAttachments(col),function(att){att.selected=select})})})};$scope.clusterpost={};$scope.mfsda={editJobParameters:true,jobParameters:$scope.jobParameters};$scope.mfsda.submitJob=function(){var mfsda=$scope.mfsda.getData();var job={};if($scope.mfsda.name){job.name=$scope.mfsda.name}job.executable="MFSDA.sh";job.parameters=[{flag:"-shapeData",name:"shapeData.txt"},{flag:"-coordData",name:mfsda.template.name},{flag:"-covariate",name:"covariate.txt"},{flag:"-covariateInterest",name:"covariateInterest.txt"},{flag:"-covariateType",name:"covariateType.txt"},{flag:"-outputDir",name:"./output"},{flag:"-exportJSON",name:""}];job.type="job";job.inputs=mfsda.inputs;job.executionserver=$scope.clusterpost.selectedServer.name;job.outputs=[{name:"output",type:"tar.gz"},{name:"stdout.out",type:"file"},{name:"stderr.err",type:"file"},{name:"efit.json",type:"file",path:"./output/efit.json"},{name:"pvalues.json",type:"file",path:"./output/pvalues.json"}];job.userEmail=$scope.user.email;job.jobparameters=[];var jobParameters=minimist(stringArgv($scope.mfsda.jobParameters));_.each(jobParameters,function(val,key){if(_.isArray(val)){_.each(val,function(v){job.jobparameters.push({name:v,flag:"-"+key})})}else{job.jobparameters.push({name:val,flag:"-"+key})}});return clusterpostService.createAndSubmitJob(job,_.pluck(mfsda.data,"name"),_.pluck(mfsda.data,"data")).then(function(res){console.log(res)})};$scope.mfsda.download=function(job){if(job){var jobname=job._id;if(job.name){jobname=job.name}var zip=new JSZip;var allpromise=[];_.each(job.inputs,function(input){allpromise.push(clusterpostService.getAttachment(job._id,input.name,"arraybuffer").then(function(ab){return{name:input.name,arraybuffer:ab.data}}))});if(job._attachments["efit.json"]){allpromise.push(clusterpostService.getAttachment(job._id,"efit.json","arraybuffer").then(function(ab){return{name:"efit.json",arraybuffer:ab.data}}))}if(job._attachments["pvalues.json"]){allpromise.push(clusterpostService.getAttachment(job._id,"pvalues.json","arraybuffer").then(function(ab){return{name:"pvalues.json",arraybuffer:ab.data}}))}return Promise.all(allpromise).then(function(filecontent){_.each(filecontent,function(fc){zip.file(jobname+"/"+fc.name,fc.arraybuffer)});return zip.generateAsync({type:"blob"}).then(function(bb){saveAs(bb,jobname+".zip")})})}};$scope.mfsda.getData=function(){var mfsda={};$scope.mfsda.showWarningTemplate=false;var covariateName=_.clone($scope.projects.analysis.selectedProjectDataKeys);var covariate=_.clone($scope.projects.analysis.selectedProjectData);var mapnames={};var templates=_.map(covariate,function(cov){if(cov.isTemplate){return _.map(cov.attachments,function(att,colid){return _.map(att,function(a,name){if(a.selected){var obj={name:"",local:{uri:""}};obj.local.uri=colid+"/"+name;if(mapnames[name]){obj.name=mapnames[name]+"_"+name;mapnames[name]+=1}else{mapnames[name]=1;obj.name=name}return obj}return""})})}});covariate=_.compact(_.map(covariate,function(cov){if(!cov.isTemplate){_.each(covariateName,function(covkey){if(cov[covkey]===undefined){cov[covkey]=0}});return cov}return null}));var template=_.compact(_.flatten(templates));if(template.length!=1){$scope.mfsda.showWarningTemplate=true;return}var covariateNameIndex=_.indexOf(covariateName,"patientId");if(_.indexOf(covariateName,"patientId")!=-1){covariateName.splice(covariateNameIndex,1)}var covariateNameIndex=_.indexOf(covariateName,"attachments");if(_.indexOf(covariateName,"attachments")!=-1){covariateName.splice(covariateNameIndex,1)}var covariateNameIndex=_.indexOf(covariateName,"template");if(_.indexOf(covariateName,"template")!=-1){covariateName.splice(covariateNameIndex,1)}try{var result=json2csv({data:covariate,fields:covariateName}).split("\n");result.splice(0,1);covariatecsv=result.join("\n")}catch(err){console.error(err)}var covariateInterest=_.map(covariateName,function(){return"1"}).join(",");var covariateType=_.map(covariateName,function(cn){var data=_.pluck(covariate,cn);var datatype=_.map(data,function(d){if(_.isNumber(d)){return Number.isInteger(d)}return 1});return Number(!eval(datatype.join("&&")))}).join(",");var filelistobj=_.compact(_.flatten(_.map(covariate,function(cov){if(!cov.isTemplate){return _.compact(_.flatten(_.map(cov.attachments,function(att,colid){return _.map(att,function(a,name){if(a.selected){var obj={name:"",local:{uri:""}};obj.local.uri=colid+"/"+name;if(mapnames[name]){obj.name=mapnames[name]+"_"+name;mapnames[name]+=1}else{mapnames[name]=1;obj.name=name}return obj}return""})})))}return null})));mfsda.data=[];mfsda.data.push({name:"shapeData.txt",data:_.pluck(filelistobj,"name").join("\n")});mfsda.data.push({name:"covariate.txt",data:covariatecsv});mfsda.data.push({name:"covariateInterest.txt",data:covariateInterest});mfsda.data.push({name:"covariateType.txt",data:covariateType});if(template.length==1){filelistobj.push(template[0])}filelistobj.push({name:"shapeData.txt"});filelistobj.push({name:"covariate.txt"});filelistobj.push({name:"covariateInterest.txt"});filelistobj.push({name:"covariateType.txt"});mfsda.inputs=filelistobj;mfsda.template=template[0];return mfsda};$scope.mfsda.hueSlider={min:0,max:1,options:{step:.01,precision:2,ceil:1,floor:0}};$scope.mfsda.covariateSlider={value:0,options:{step:1,minLimit:0,maxLimit:8,ceil:8}};$scope.mfsda.componentSlider={value:0,options:{step:1,minLimit:0,maxLimit:2,ceil:2}};$scope.mfsda.pvalueSlider={value:0,options:{step:1,minLimit:0,maxLimit:7,ceil:7}};$scope.mfsda.jobCallback=function(job){$scope.mfsda.vtkUrl=job;$scope.activeTab=2;var template=_.find(job.parameters,function(param){return param.flag=="-coordData"});template=template.name;return Promise.all([clusterpostService.getAttachment(job._id,"efit.json","json"),clusterpostService.getAttachment(job._id,"pvalues.json","json"),clusterpostService.getAttachment(job._id,template,"text")]).then(function(res){var data=_.compact(_.pluck(res,"data"));$scope.mfsda.vtkPolyData=dcbiaVTKService.parseVTK(data[2]);if(data.length>0){$scope.mfsda.efit=data[0];$scope.mfsda.Lpvals_fdr=data[1].Lpvals_fdr;if($scope.mfsda.Lpvals_fdr.length>0){$scope.mfsda.pvalueSlider.maxLimit=$scope.mfsda.Lpvals_fdr[0].length-1;$scope.mfsda.pvalueSlider.options.ceil=$scope.mfsda.Lpvals_fdr[0].length-1}var size=$scope.mfsda.efit.efitBetas._ArraySize_;$scope.mfsda.covariateSlider.options.ceil=size[0]-1;$scope.mfsda.covariateSlider.options.maxLimit=size[0]-1;$scope.mfsda.componentSlider.options.ceil=size[2]-1;$scope.mfsda.componentSlider.options.maxLimit=size[2]-1;var colors=$scope.mfsda.getEfitBetas();$scope.mfsda.vtkPolyData.addPointDataArray(new Float32Array(colors),"pointScalars","Float32Array")}$scope.$apply()}).catch(console.error)};$scope.mfsda.getEfitBetas=function(){var efitBetas=[];if($scope.mfsda.efit&&$scope.mfsda.efit.efitBetas){var arraydata=$scope.mfsda.efit.efitBetas._ArrayData_;var size=$scope.mfsda.efit.efitBetas._ArraySize_;var start=$scope.mfsda.componentSlider.value*size[1]*size[0]+$scope.mfsda.covariateSlider.value;var end=start+size[1]*size[0];var max=0;for(var i=start;i<end&&i<arraydata.length;i+=size[0]){efitBetas.push(arraydata[i])}}return efitBetas};$scope.mfsda.getPvalues=function(){var pvalues=[];if($scope.mfsda.Lpvals_fdr){for(var i=0;i<$scope.mfsda.Lpvals_fdr.length;i++){pvalues.push($scope.mfsda.Lpvals_fdr[i][$scope.mfsda.pvalueSlider.value])}}return pvalues};$scope.mfsda.selectOutput={options:[{name:"betas"},{name:"pValues"}]};$scope.mfsda.selectOutput.update=function(){var colors=[];if($scope.mfsda.selectOutput.option){if($scope.mfsda.selectOutput.option.name==="betas"){colors=$scope.mfsda.getEfitBetas()}else if($scope.mfsda.selectOutput.option.name==="pValues"){colors=$scope.mfsda.getPvalues()}$scope.mfsda.vtkPolyData.addPointDataArray(new Float32Array(colors),"pointScalars","Float32Array")}};$scope.$watch("mfsda.covariateSlider.value",function(covariate){if(covariate!==undefined&&$scope.mfsda.vtkPolyData){var colors=$scope.mfsda.getEfitBetas();$scope.mfsda.vtkPolyData.addPointDataArray(new Float32Array(colors),"pointScalars","Float32Array")}});$scope.$watch("mfsda.componentSlider.value",function(component){if(component!==undefined&&$scope.mfsda.vtkPolyData){var colors=$scope.mfsda.getEfitBetas();$scope.mfsda.vtkPolyData.addPointDataArray(new Float32Array(colors),"pointScalars","Float32Array")}});$scope.$watch("mfsda.pvalueSlider.value",function(pValue){if(pValue!==undefined&&$scope.mfsda.vtkPolyData){var colors=$scope.mfsda.getPvalues();$scope.mfsda.vtkPolyData.addPointDataArray(new Float32Array(colors),"pointScalars","Float32Array")}});$scope.$watch("mfsda.fileTemplate",function(fileTemplate){if(fileTemplate){var reader=new FileReader;reader.onload=function(e){var vtk=e.target.result;$scope.mfsda.vtkPolyData=dcbiaVTKService.parseVTK(vtk);$scope.mfsda.selectOutput.update()};reader.onerror=function(e){reject(e)};reader.readAsText(fileTemplate)}});$scope.csv.export=function(project){var prom;if(!$scope.projects.selectedProject||project._id!==$scope.projects.selectedProject._id){prom=$scope.projects.select(project)}else{prom=Promise.resolve(true)}prom.then(function(){var keys=$scope.projects.getProjectKeys([$scope.projects.selectedProject]);var csv="name:,"+$scope.projects.selectedProject.name+"\n";csv+="description:,"+$scope.projects.selectedProject.description+"\n";csv+="patients:,"+$scope.projects.selectedProject.patients+"\n";csv+="\n";var collectionKeys=["Name","Number of items","Type"];csv+=collectionKeys.toString();csv+="\n";_.each($scope.projects.selectedProject.collections,function(collection,i){_.each($scope.clinicalDataCollection.collections,function(clinicalCollection){if(collection._id===clinicalCollection._id){csv+=clinicalCollection.name+","+clinicalCollection.items.length+","+clinicalCollection.type+"\n"}});_.each($scope.morphologicalDataCollection.collections,function(morphologicalDataCollection){if(collection._id===morphologicalDataCollection._id){csv+=morphologicalDataCollection.name+","+morphologicalDataCollection.items.length+","+morphologicalDataCollection.type+"\n"}})});var filename=$scope.projects.selectedProject.name;if($scope.projects.selectedProject.name.indexOf("csv")===-1){filename+=".csv"}return $scope.csv.download(filename,csv)}).catch(console.error)};$scope.csv.download=function(filename,csv){var pom=document.createElement("a");var bb=new Blob([csv],{type:"text/plain"});pom.setAttribute("href",window.URL.createObjectURL(bb));pom.setAttribute("download",filename);pom.dataset.downloadurl=["text/plain",pom.download,pom.href].join(":");pom.click()};$scope.clinical={data:[]};$scope.morphological={data:[]};$scope.clinical.getSelectedProjectData=function(){var mapId=_.map($scope.projects.selectedProject.collections,function(col){return col._id});return Promise.all(_.map(mapId,dcbia.getClinicalData)).then(function(res){_.each(res,function(collection){$scope.clinical.data=$scope.clinical.data.length?$scope.projects.mergeCollections($scope.clinical.data,collection.data):collection.data});return $scope.clinical.data})};$scope.morphological.getSelectedProjectData=function(){var mapId=_.map($scope.projects.selectedProject.collections,function(col){return col._id});return Promise.all(_.map(mapId,dcbia.getMorphologicalData)).then(function(res){_.each(res,function(collection){$scope.morphological.data=$scope.morphological.data.length?$scope.projects.mergeCollections($scope.morphological.data,collection.data):collection.data});return $scope.morphological.data})};$scope.clusterpost={};clusterpostService.getExecutionServers().then(function(res){$scope.clusterpost.servers=res.data;$scope.clusterpost.selectedServer=res.data[0]});$scope.projects.getProjects().then(function(){return $scope.morphologicalDataCollection.getMorphologicalDataCollections()}).then(function(){return $scope.clinicalDataCollection.getClinicalDataCollections()})}return{restrict:"E",link:link,scope:{jobParameters:"="},templateUrl:"./src/dcbia-mfsda.template.html"}}]);angular.module("dcbia-jobs").run(["$templateCache",function($templateCache){"use strict"
;$templateCache.put("./src/dcbia-mfsda.template.html",'<uib-tabset active="activeTab">\n'+'\t<uib-tab heading="Create task" index="0">\n'+'\t\t<div ng-if="projects.section == 0">\n'+'\t\t\t<div class="panel panel-default">\n'+'\t\t  \t\t<div class="panel-body">  \t\t\t\n'+'\t\t\t\t\t<div class="col-sm-6 col-md-4" ng-repeat="project in projects.projects">\n'+'\t\t\t\t\t\t<div ng-class="projects.projectsProperties[project._id].class">\n'+'\t\t\t\t\t\t    <div class="thumbnail">\n'+'\t\t\t\t\t\t      <div class="caption">\n'+"\t\t\t\t\t\t        <h3>{{project.name}}</h3>\n"+"\t\t\t\t\t\t        <p>\n"+"\t\t\t\t\t\t        \t<b>Number of items: </b> {{projects.getProjectItems(project)}}\n"+"\t\t\t\t\t\t        </p>\n"+'\t\t\t\t\t        \t<div class="btn-group">\n'+'\t\t\t\t\t\t\t\t <button type="button" class="btn btn-default" ng-click="projects.showSection = 1;projects.select(project)">\n'+'\t\t\t\t\t\t\t\t \t<span class="glyphicon glyphicon-eye-open"></span>\n'+"\t\t\t\t\t\t\t\t </button>\n"+"\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t      </div>\n"+"\t\t\t\t\t\t    </div>\n"+"\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t</div>\n"+"\t\t\t\t</div>\n"+"\t\t\t</div>\n"+'\t\t\t<div class="panel panel-default" style="overflow:scroll" ng-if="projects.showSection == 1">\n'+'\t\t\t\t<div class="panel-heading">\n'+"\t\t\t    \tSaved subsets\n"+"\t\t\t  \t</div>\n"+'\t\t\t  \t<div class="panel-body">\n'+'\t\t\t  \t\t<table st-table="projects.displayedAnalyses" st-safe-src="projects.selectedProject.analyses" class="table table-striped">\n'+"\t\t\t            <thead>\n"+"\t\t\t                <tr>\n"+'\t\t\t                    <th colspan="2">\n'+'\t\t\t                        <input st-search="" placeholder="search by name" class="input-sm form-control" type="search"/>\n'+"\t\t\t                    </th>\t                    \n"+"\t\t\t                </tr>\n"+"\t\t\t            </thead>\n"+"\t\t\t            <tbody>\n"+'\t\t\t                <tr ng-repeat="(index, analysis) in projects.displayedAnalyses">\n'+"\t\t\t                    <td>\n"+"\t\t\t                        {{analysis.name}}\n"+"\t\t\t                    </td>\n"+"\t\t\t                    <td>\n"+'\t\t\t                        <button type="button" class="btn btn-info" ng-click="projects.showSubset(index)">\n'+'\t\t\t                \t\t\t<span class="glyphicon glyphicon-eye-open"></span>\n'+"\t\t\t             \t\t\t</button>\n"+"\t\t\t                    </td>                        \n"+"\t\t\t                </tr>\n"+"\t\t\t            </tbody>\n"+"\t\t\t        </table>\n"+"\t\t\t  \t</div>\n"+"\t\t\t</div>\n"+'\t\t\t<div class="panel panel-default" style="overflow:scroll" ng-if="projects.showSection == 1">\n'+'\t\t\t\t<div class="panel-heading">\n'+"\t\t\t    \tSubset\n"+"\t\t\t  \t</div>\t\t  \t\n"+'\t\t\t\t<div class="panel-body">\n'+'\t\t\t\t\t<div class="input-group">\n'+'\t\t\t  \t\t\t<span class="input-group-addon">Name</span>\n'+'\t\t\t  \t\t\t<input type="text" class="form-control" placeholder="Subset name" aria-describedby="basic-addon3" ng-model="projects.analysis.name">\n'+"\t\t  \t\t\t</div>  \t\t\t\t    \n"+'\t\t\t\t\t<table st-table="projects.analysis.selectedProjectDataDisplayed" st-safe-src="projects.analysis.selectedProjectData" class="table table-striped">\n'+"\t\t\t\t\t\t<thead>\n"+"\t\t\t\t\t\t\t<tr>\n"+'\t\t\t\t\t\t\t\t<th colspan="2" st-sort="{{key}}" ng-if="projects.analysis.hasGroup">group</th>\n'+'\t\t\t\t\t\t\t\t<th colspan="1" st-sort="{{key}}">Template</th>\n'+'\t\t\t\t\t\t\t\t<th colspan="2" ng-repeat="key in projects.analysis.selectedProjectDataKeys" st-sort="{{key}}">{{key}}</th>\n'+"\t\t\t\t\t\t\t</tr>\n"+"\t\t\t\t\t\t\t<tr>\n"+'\t\t\t\t\t\t\t\t<th colspan="2" ng-if="projects.analysis.hasGroup">\n'+'\t\t\t\t\t\t\t\t\t<div class="input-group">\t\t\t\t\t\t\t\n'+'\t\t\t\t\t\t\t\t\t\t<span class="input-group-btn">\n'+'\t\t\t\t\t\t\t\t\t\t\t<button type="button" class="btn btn-sm btn-info" ng-click="projects.setGroupProjectDataDisplayed()" >\n'+'\t\t\t\t\t                \t\t\t<span class="glyphicon glyphicon-ok"></span>\n'+"\t\t\t\t\t             \t\t\t</button>\n"+"\t\t\t\t\t\t\t\t\t\t</span>\n"+'\t\t\t\t\t\t\t\t\t\t<input placeholder="Set group" class="input-sm form-control" type="number" ng-model="projects.analysis.group"/>\n'+"\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t</th>\n"+'\t\t\t\t\t\t\t\t<th colspan="1"></th>\n'+'\t\t\t\t\t\t\t\t<th colspan="2" ng-repeat="key in projects.analysis.selectedProjectDataKeys">\n'+'\t\t\t\t\t\t\t\t\t<input st-search="{{key}}" placeholder="search by {{key}}" class="input-sm form-control" type="search" ng-if="key!=\'attachments\'" />\n'+'\t\t\t\t\t\t\t\t\t<div class="input-group" ng-if="key==\'attachments\'">\n'+'\t\t\t\t\t\t\t\t\t\t<span class="input-group-btn">\n'+'\t\t\t\t\t\t\t\t  \t\t\t<button type="button" class="btn btn-sm btn-info" ng-click="projects.selectVisibleAttachments(true)">\n'+'\t\t\t\t\t                \t\t\t<span class="glyphicon glyphicon-ok"></span>\n'+"\t\t\t\t\t             \t\t\t</button>\n"+'\t\t\t\t\t             \t\t\t<button type="button" class="btn btn-sm btn-danger" ng-click="projects.selectVisibleAttachments(false)">\n'+'\t\t\t\t\t                \t\t\t<span class="glyphicon glyphicon-remove"></span>\n'+"\t\t\t\t\t             \t\t\t</button>\n"+"\t\t\t\t\t\t\t  \t\t\t</span>\n"+'\t\t\t\t\t\t\t\t\t\t<input placeholder="search for attachments" class="input-sm form-control" ng-model="projects.analysis.attachmentsRegex" type="search" />\n'+"\t\t\t\t\t\t\t  \t\t</div>\n"+"\t\t\t\t\t\t\t\t</th>\n"+"\t\t\t\t\t\t\t</tr>\n"+"\t\t\t\t\t\t</thead>\n"+"\t\t\t\t\t\t<tbody>\n"+'\t\t\t\t\t\t\t<tr ng-repeat="row in projects.analysis.selectedProjectDataDisplayed">\n'+'\t\t\t\t\t\t\t\t<td colspan="2" ng-if="projects.analysis.hasGroup"><input placeholder="group" class="input-sm form-control" ng-model="row.group" type="number"/></td>\n'+'\t\t\t\t\t\t\t\t<td colspan="1"><input type="checkbox" aria-label="..." ng-model="row.isTemplate"></td>\n'+'\t\t\t\t\t\t\t\t<td colspan="2" ng-repeat="key in projects.analysis.selectedProjectDataKeys">\n'+"\t\t\t\t\t\t\t\t\t<div ng-if=\"key == '_attachments'\">\n"+'\t\t\t\t\t\t\t\t\t\t<button type="button" class="btn btn-default" ng-repeat="(key, att) in row[key]" ng-click="morphologicalDataCollection.downloadAttachment(row._id, key, att)">\n'+'\t\t\t\t\t\t\t\t\t\t\t<span class="glyphicon glyphicon-eye"></span>{{att}}\n'+"\t\t\t\t\t\t\t\t\t\t</button>\n"+"\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t\t<div ng-if=\"key == 'attachments'\">\n"+'\t\t\t\t\t\t\t\t\t\t<div ng-repeat="(keycoll, collattachments) in row[key]">\n'+'\t\t\t\t\t\t\t\t\t\t\t<div class="input-group" ng-repeat="(keyatt, att) in projects.getFilteredAttachments(collattachments)">\n'+'\t\t\t\t\t\t\t\t\t\t\t\t<span class="input-group-addon">\n'+'\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="checkbox" aria-label="..." ng-model="att.selected">\n'+"\t\t\t\t\t\t\t\t\t\t\t\t</span>\n"+'\t\t\t\t\t\t\t\t\t\t\t\t<label class="form-control" >{{keyatt}}</label>\n'+"\t\t\t\t\t\t\t\t\t\t    </div>\n"+"\t\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t\t<div ng-if=\"!_.isArray(row[key]) && key != '_attachments' && key != 'attachments'\">\n"+"\t\t\t\t\t\t\t\t\t\t{{row[key]}}\n"+"\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t\t<div ng-if=\"_.isArray(row[key]) && key != '_attachments' && key != 'attachments'\">\n"+"\t\t\t\t\t\t\t\t\t\t<ul>\n"+'\t\t\t\t\t\t\t\t\t\t\t<li ng-repeat="item in row[key]" ng-if="key == \'owners\'">{{item.user}}</li>\n'+"\t\t\t\t\t\t\t\t\t\t</ul>\n"+"\t\t\t\t\t\t\t\t\t</div>\n"+"\t\t\t\t\t\t\t\t</td>\t\t\t\t\t\t\n"+"\t\t\t\t\t\t\t</tr>\n"+"\t\t\t\t\t\t</tbody>\n"+"\t\t\t\t\t</table>\n"+"\n"+'\t\t\t\t\t<div class="alert alert-warning" role="alert" ng-if="mfsda.showWarningTemplate">\n'+"\t\t\t\t\t\tYou have selected more than 1 or no template for the MFSDA statistical analysis. <br>\t\t\t\t\n"+"\t\t\t\t\t</div>\n"+"\t\t\t\t\t<br>\n"+'\t\t\t\t\t<div class="row">\n'+'\t\t\t\t\t  <div class="col-md-6">\n'+'\t\t\t\t\t    <div class="input-group">\n'+'\t\t\t\t\t\t\t<span class="input-group-addon" id="basic-addon1">Task name</span>\n'+'\t\t\t\t\t\t\t<input type="text" class="form-control" placeholder="MFSDA task name" aria-describedby="basic-addon3" ng-model="mfsda.name">\n'+"\t\t\t\t\t    </div>\n"+"\t\t\t\t\t  </div>\n"+'\t\t\t\t\t  <div class="col-md-6">\n'+'\t\t\t\t\t    <div class="input-group">\n'+'\t\t\t\t\t    \t<span class="input-group-addon" id="basic-addon1">Execution server</span>\n'+'\t\t\t\t\t    \t<select class="form-control"  ng-model="clusterpost.selectedServer" ng-options="server.name for server in clusterpost.servers"></select>\n'+"\t\t\t\t\t    </div>\n"+"\t\t\t\t\t  </div>\n"+"\t\t\t\t\t</div>\n"+"\t\t\t\t\t<br>\n"+'\t\t\t\t\t<div class="row">\n'+'\t\t\t\t\t\t<div class="col-md-12">\n'+'\t\t\t\t\t\t\t<div class="input-group">\n'+'\t\t\t\t\t\t\t\t<span class="input-group-btn">\n'+'\t\t\t\t\t\t\t\t\t<button class="btn btn-default" type="button" ng-click="mfsda.editJobParameters=!mfsda.editJobParameters"><span class="glyphicon glyphicon-pencil" aria-hidden="true"></span></button>\n'+"\t\t\t\t\t\t\t\t</span>\t\t\t\t\n"+'\t\t\t\t\t\t\t\t<input type="text" class="form-control" placeholder="Additional job parameters" aria-describedby="basic-addon3" ng-model="mfsda.jobParameters" ng-readonly="mfsda.editJobParameters">\n'+"\t\t\t\t  \t\t\t</div>\n"+"\t\t\t\t  \t\t</div>\n"+"\t\t\t  \t\t</div>\n"+"\t\t\t  \t\t<br>\n"+'\t\t\t  \t\t<div class="row">\n'+'\t\t\t  \t\t\t<div class="col-md-12">\n'+'\t\t\t\t  \t\t\t<span class="input-group-btn">\n'+'\t\t\t\t\t\t\t\t<button type="button" class="btn btn-success" ng-click="mfsda.submitJob()">\n'+'\t\t\t\t\t\t\t\t\t<span class="glyphicon glyphicon-ok"></span>\n'+"\t\t\t\t\t\t\t\t</button>\n"+'\t\t\t\t\t\t\t\t<button type="button" class="btn btn-info" ng-click="mfsda.download()">\n'+'\t\t\t\t\t\t\t\t\t<span class="glyphicon glyphicon-download"></span>\n'+"\t\t\t\t\t\t\t\t</button>\t\t  \t\t\t\n"+"\t\t\t\t  \t\t\t</span>\n"+"\t\t\t\t  \t\t</div>\n"+"\t\t\t  \t\t</div>\n"+"\t\t\t\t</div>\n"+"\t\t\t</div>\n"+"\t\t</div>\n"+"\t</uib-tab>\n"+'\t<uib-tab heading="Active tasks" index="1">\n'+'\t\t<div class="panel panel-default">\t\t\t\t\n'+'\t\t\t<clusterpost-jobs executable="\'MFSDA.sh\'" job-callback="mfsda.jobCallback" download-callback="mfsda.download"></clusterpost-jobs>\n'+"\t\t</div>\n"+"\t</uib-tab>\n"+'\t<uib-tab heading="Display results" index="2">\n'+"\n"+"\n"+"\n"+'\t\t<div class="input-group">\n'+'\t\t\t<select ng-model="mfsda.selectOutput.option" class="form-control" ng-options="option as option.name for option in mfsda.selectOutput.options" ng-change="mfsda.selectOutput.update()">\n'+"\t\t\t</select>\n"+"\t\t</div>\n"+"\n"+'\t\t<div class="input-group">\n'+'\t\t\t<label class="btn btn-default" for="mfsda-file-selector">\n'+'\t\t\t \t<span class="glyphicon glyphicon-folder-open"></span>\n'+'\t\t\t    <input id="mfsda-file-selector" file-model=\'mfsda.fileTemplate\' type="file"  style="display:none;">\n'+"\t\t\t</label>\n"+"\t\t</div>\n"+"\t\t\n"+'\t\t<div class="panel panel-default">\n'+'\t\t  <div class="panel-heading">\n'+'\t\t    <h3 class="panel-title">Hue</h3>\n'+"\t\t  </div>\n"+'\t\t  <div class="panel-body">\n'+'\t\t    <rzslider class="custom-slider"\n'+'\t\t\trz-slider-model="mfsda.hueSlider.min"\n'+'\t\t\trz-slider-high="mfsda.hueSlider.max"\n'+'\t\t\trz-slider-options="mfsda.hueSlider.options"></rzslider>\t\t\n'+"\t\t  </div>\n"+"\t\t</div>\n"+"\t\t\n"+'\t\t<div ng-if="mfsda.selectOutput.option.name == \'betas\'" class="col-md-12">\n'+'\t\t\t<div class="panel panel-default col-md-6">\n'+'\t\t\t\t<div class="panel-heading">\n'+'\t\t\t\t\t<h3 class="panel-title">Covariate</h3>\n'+"\t\t\t\t</div>\n"+'\t\t\t\t<div class="panel-body">\n'+'\t\t\t\t\t<rzslider class="custom-slider"\n'+'\t\t\t\t\trz-slider-model="mfsda.covariateSlider.value"\t\t\t\n'+'\t\t\t\t\trz-slider-options="mfsda.covariateSlider.options"></rzslider>\n'+"\t\t\t\t</div>\n"+"\t\t\t</div>\n"+'\t\t\t<div class="panel panel-default col-md-6">\n'+'\t\t\t\t<div class="panel-heading">\n'+'\t\t\t\t\t<h3 class="panel-title">Component</h3>\n'+"\t\t\t\t</div>\n"+'\t\t\t\t<div class="panel-body">\n'+'\t\t\t\t\t<rzslider class="custom-slider"\n'+'\t\t\t\t\trz-slider-model="mfsda.componentSlider.value"\t\t\t\n'+'\t\t\t\t\trz-slider-options="mfsda.componentSlider.options"></rzslider>\n'+"\t\t\t\t</div>\n"+"\t\t\t</div>\n"+"\t\t</div>\n"+"\n"+"\t\t<div ng-if=\"mfsda.selectOutput.option.name == 'pValues'\">\n"+'\t\t\t<div class="panel-heading">\n'+'\t\t\t\t<h3 class="panel-title">pValue</h3>\n'+"\t\t\t</div>\n"+'\t\t\t<div class="panel-body">\n'+'\t\t\t\t<rzslider class="custom-slider"\n'+'\t\t\t\t\trz-slider-model="mfsda.pvalueSlider.value"\t\t\t\n'+'\t\t\t\t\trz-slider-options="mfsda.pvalueSlider.options"></rzslider>\t\t\n'+"\t\t\t</div>\n"+"\n"+"\t\t</div>\n"+"\t\t<br>\n"+'\t\t<dcbia-vtk vtk-poly-data="mfsda.vtkPolyData" hue-range="mfsda.hueSlider"></dcbia-vtk>\n'+"\t\t\n"+"\t</uib-tab>\n"+"</uit-tabset>\n"+"\n")}]);
//# sourceMappingURL=dcbia-jobs.min.js.map